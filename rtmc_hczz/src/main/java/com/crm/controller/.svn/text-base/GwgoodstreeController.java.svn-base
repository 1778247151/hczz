package com.crm.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.crm.common.BasePageResultVo;
import com.crm.common.BaseResultVo;
import com.crm.common.LigerPageDataVo;
import com.crm.common.ResponseCode;
import com.crm.common.Status;
import com.crm.pojo.GwBuildingTreeModel;
import com.crm.pojo.GwgoodstreeModel;
import com.crm.service.GwgoodstreeService;
import com.crm.util.DateUtil;
import com.crm.util.ValidateUtil;

/**
 * 
 * GwgoodstreeController:货品管理访问控制层
 *
 * @author chengpengfei
 * @date  2016年3月10日
 * @version  jdk1.8
 *
 */
@Controller
@RequestMapping("/goodstree")
public class GwgoodstreeController {
	@Resource(name="gwgoodstreeService")
	private GwgoodstreeService gwgoodstreeImpl;
	/**
	 * 
	 * getgoodstree:获取货品管理集合（分页）
	 *
	 * @date 2016年3月10日
	 * @param page   当前页码数
	 * @param pagesize      每页显示记录数
	 * @param request
	 * @return
	 */
	@RequestMapping("/getgoodstree.do")
	@ResponseBody
	public LigerPageDataVo getgoodstree(int currentPage,int pageSize,HttpServletRequest request){
		//条件参数
		Map<String, Object> params=new HashMap<String, Object>();
		params.put("currentPage", currentPage);
		params.put("pageSize", pageSize);
		
		BasePageResultVo baseResultVo=gwgoodstreeImpl.selectPageList(params);
		//liger ui 分页格式数据
		LigerPageDataVo data=new LigerPageDataVo();
		data.setRows(baseResultVo.getRows());
		data.setTotal(baseResultVo.getPageInfo().getTotalRecord());
		return data;
	}
	/**
	 * 
	 * addgoodstree:添加货品管理数据
	 *
	 * @date 2016年3月10日
	 * @param GwgoodstreeModel
	 * @return
	 */
	@RequestMapping("/addgoodstree.do")
	@ResponseBody
	public BaseResultVo addgoodstree(GwgoodstreeModel gwgoodstreeModel,HttpServletResponse response){
		
		if(!ValidateUtil.isAvailableAccountStr(gwgoodstreeModel.getBm(), 4, 10)){
			return BaseResultVo.responseFail("货品编号为4-10位的字符且不能包含非法字符");
		}
		GwgoodstreeModel goodstree = gwgoodstreeImpl.getGoodsTreeByCode(gwgoodstreeModel.getBm());
		if(goodstree!=null){
		return BaseResultVo.responseFail("货品编号已存在");	
		}
		BaseResultVo baseResultVo=new BaseResultVo();
		Status status=new Status();
		status.setCode(ResponseCode.OPR_SUCCESS);//提示代码
		status.setMsg("操作成功");//提示信息
		status.setDebugMsg("");//bug信息
		status.setUrl("");//url
		baseResultVo.setStatus(status);
		/*//密码加密
		gwAdminUsersModel.setPassword(MD5.getMD5(gwAdminUsersModel.getPassword()));*/
		
		//更新时间
		gwgoodstreeModel.setTime(DateUtil.getCurrentDatetime("-"));
		gwgoodstreeModel.setState(1);;
		gwgoodstreeImpl.insert(gwgoodstreeModel);
		return baseResultVo;
	}
	/**
	 * 
	 * delegoodstree:删除货品管理数据
	 *
	 * @date 2016年3月10日
	 * @param GwgoodstreeModel       货品管理对象
	 * @return
	 */
	@RequestMapping("/delegoodstree.do")
	@ResponseBody
	public BaseResultVo delegoodstree(int id,HttpServletRequest request){
		BaseResultVo baseResultVo=new BaseResultVo();
		Status status=new Status();
		status.setCode(ResponseCode.OPR_SUCCESS);//提示代码
		status.setMsg("操作成功");//提示信息
		status.setDebugMsg("");//bug信息
		status.setUrl("");//url
		
		if(id==0){
			status.setCode(ResponseCode.OPR_FAIL);
			status.setMsg("数据异常");//提示信息
			baseResultVo.setStatus(status);
			return baseResultVo;
		}
		//新建一个货品组别对象
		GwgoodstreeModel goodsTree = new GwgoodstreeModel();
		goodsTree.setId(id);
		goodsTree.setState(0);
		int num=gwgoodstreeImpl.update(goodsTree);
		if(num<0){
			status.setCode(ResponseCode.OPR_FAIL);
			status.setMsg("操作失败");//提示信息
		}
		baseResultVo.setStatus(status);
		return baseResultVo;
	}
	/**
	 * 
	 * getgoodStreeById:根据货品管理id，获取货品管理信息
	 *
	 * @date 2016年3月10日
	 * @param id
	 * @param request
	 * @return
	 */
	@RequestMapping("/getgoodStreeById.do")
	@ResponseBody
	public BaseResultVo getgoodStreeById(int id,HttpServletRequest request){
		BaseResultVo baseResultVo=new BaseResultVo();
		Status status=new Status();
		status.setCode(ResponseCode.OPR_SUCCESS);//提示代码
		status.setMsg("操作成功");//提示信息
		status.setDebugMsg("");//bug信息
		status.setUrl("");//url
		
		if(id==0){
			status.setCode(ResponseCode.OPR_FAIL);
			status.setMsg("数据异常");//提示信息
			baseResultVo.setStatus(status);
			return baseResultVo;
		}
		
		//获取货品管理信息
		GwgoodstreeModel gwgoodstreeModel=gwgoodstreeImpl.selectById(id);
		baseResultVo.setData(gwgoodstreeModel);
		baseResultVo.setStatus(status);
		return baseResultVo;
	}
	/**
	 * 
	 * updateGoodStree:更新货品管理数据
	 *
	 * @date 2016年3月10日
	 * @param GwgoodstreeModel       货品管理对象
	 * @return
	 */
	@RequestMapping("/updateGoodStree.do")
	@ResponseBody
	public BaseResultVo updateGoodStree(GwgoodstreeModel gwgoodstreeModel){
		BaseResultVo baseResultVo=new BaseResultVo();
		Status status=new Status();
		status.setCode(ResponseCode.OPR_SUCCESS);//提示代码
		status.setMsg("操作成功");//提示信息
		status.setDebugMsg("");//bug信息
		status.setUrl("");//url
		if(!ValidateUtil.isAvailableAccountStr(gwgoodstreeModel.getBm(), 4, 10)){
			return BaseResultVo.responseFail("货品编号为4-10位的字符且不能包含非法字符");
		}
		//验证主键是否为空
		if(gwgoodstreeModel.getId()==0){
			status.setCode(ResponseCode.OPR_FAIL);
			status.setMsg("数据异常");
			baseResultVo.setStatus(status);
			return baseResultVo;
		}
		
		//更新时间
		gwgoodstreeModel.setTime(DateUtil.getCurrentDatetime("-"));
		GwgoodstreeModel gwgoodstree=gwgoodstreeImpl.selectById(gwgoodstreeModel.getId());
		GwgoodstreeModel goodstree = gwgoodstreeImpl.getGoodsTreeByCode(gwgoodstreeModel.getBm());
		if(!gwgoodstree.getBm().equals(gwgoodstreeModel.getBm())&&goodstree!=null){
		return BaseResultVo.responseFail("货品编号已存在");	
		}
		//更新货品管理
		gwgoodstreeImpl.update(gwgoodstreeModel);
		baseResultVo.setStatus(status);
		return baseResultVo;
	}
	/**
	 * 
	 * getGoodsTreeList:获取所有货品集合
	 *
	 * @date 2016年3月11日
	 * @return
	 */
	@RequestMapping("/getGoodsTreeList.do")
	@ResponseBody
	public BaseResultVo getGoodsTreeList(){

		//获取所有货品
		List<GwgoodstreeModel> goodstreeList=gwgoodstreeImpl.getAllList();
		
		List<HashMap<String, Object>> treeList=new ArrayList<HashMap<String,Object>>();
		for (GwgoodstreeModel menuTree : goodstreeList) {
			HashMap<String, Object> map=new HashMap<String, Object>();
			map.put("id", menuTree.getId());//菜单id
			map.put("pid", menuTree.getFid());//父级菜单id
			map.put("text", menuTree.getName()+"【"+menuTree.getBm()+"】");//菜单名称
			map.put("isExpand", true);
			treeList.add(map);
		}
		
		BaseResultVo baseResultVo=BaseResultVo.responseSuccess("获取所有货品成功");
		baseResultVo.setData(treeList);
		return baseResultVo;
	}
	/**
	 * 
	 * getTopGoodsTree:获取一级商品组别集合
	 *
	 * @date 2016年3月23日
	 * @return
	 */
	@RequestMapping("/getTopGoodsTrees.do")
	@ResponseBody
	public Object getTopGoodsTree(){
		List<GwgoodstreeModel> goodsList=gwgoodstreeImpl.getTopGoodsTree(0);
		List<HashMap<String, Object>> dataList=new ArrayList<HashMap<String,Object>>();
		for (GwgoodstreeModel goods : goodsList) {
			HashMap<String, Object> map=new HashMap<String, Object>();
			map.put("id", goods.getId());//商品组别id
			map.put("text", goods.getName());//商品组别名称
			dataList.add(map);
		}
		return dataList;
	}
	/**
	 * 
	 * getTopGoodsTreeById:获取下级商品组别集合
	 *
	 * @date 2016年3月23日
	 * @return
	 */
	@RequestMapping("/getTopGoodsTreeById.do")
	@ResponseBody
	public Object getTopGoodsTreeById(int id){
		List<GwgoodstreeModel> goodsList=gwgoodstreeImpl.getTopGoodsTree(id);
		List<HashMap<String, Object>> dataList=new ArrayList<HashMap<String,Object>>();
		for (GwgoodstreeModel goods : goodsList) {
			HashMap<String, Object> map=new HashMap<String, Object>();
			map.put("id", goods.getId());//商品组别id
			map.put("text", goods.getName());//商品组别名称
			dataList.add(map);
		}
		return dataList;
	}
	
}
