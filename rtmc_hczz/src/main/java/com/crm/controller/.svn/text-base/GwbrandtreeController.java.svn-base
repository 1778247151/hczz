package com.crm.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.crm.common.AdminUser;
import com.crm.common.BasePageResultVo;
import com.crm.common.BaseResultVo;
import com.crm.common.LigerPageDataVo;
import com.crm.common.QueryConditon;
import com.crm.common.ResponseCode;
import com.crm.common.SecurityUtil;
import com.crm.common.Status;
import com.crm.enums.BrandTreeStateEnum;
import com.crm.pojo.GwbrandtreeModel;
import com.crm.pojo.GwformatstreeModel;
import com.crm.service.GwbrandtreeService;
import com.crm.service.GwformatstreeService;
import com.crm.util.DateUtil;
import com.crm.util.QueryConditionUtil;
import com.crm.util.ValidateUtil;

/**
 * 
 * GwbrandtreeController:品牌管理访问控制层
 *
 * @author chengpengfei
 * @date  2016年3月14日
 * @version  jdk1.8
 *
 */
@Controller
@RequestMapping("/brandtree")
public class GwbrandtreeController {
	@Resource(name="gwbrandtreeService")
	private GwbrandtreeService gwbrandtreeService;
	@Resource(name="gwformatstreeService")
	private GwformatstreeService gwformatstreeService;
	
	
	
	/**
	 * 根据条件查询品牌集合信息
	 * getBrandTreeByCondition:
	 *
	 * @author hemingjun
	 * @date 2016年8月9日
	 * @return
	 */
	@RequestMapping("/getBrandTreeByCondition.do")
	@ResponseBody
	public LigerPageDataVo getBrandTreeByCondition(int  currentPage,int pageSize,String brandName,String brandCode,Integer formatsId,HttpServletRequest request){
		//条件参数
		Map<String, Object> params=new HashMap<String, Object>();
		params.put("currentPage", currentPage);
		params.put("pageSize", pageSize);
		params.put("state3", "0");
		params.put("brandName", brandName);
		params.put("brandCode", brandCode);
		params.put("formatsId", formatsId);
		BasePageResultVo baseResultVo=gwbrandtreeService.selectPageList(params);
		//liger ui 分页格式数据
		LigerPageDataVo data=new LigerPageDataVo();
		data.setRows(baseResultVo.getRows());
		data.setTotal(baseResultVo.getPageInfo().getTotalRecord());
		return data;
	}
	
	/**
	 * 
	 * getBrandTreeBySign:获取已签约品牌信息集合（分页）
	 *
	 * @date 2016年3月11日
	 * @param page   当前页码数
	 * @param pagesize      每页显示记录数
	 * @param request
	 * @return
	 */
	@RequestMapping("/getBrandTreeBySign.do")
	@ResponseBody
	public LigerPageDataVo getBrandTreeBySign(int currentPage,int pageSize,String brandName,String brandCode,Integer formatsId,HttpServletRequest request){
		//条件参数
		Map<String, Object> params=new HashMap<String, Object>();
		params.put("currentPage", currentPage);
		params.put("pageSize", pageSize);
		params.put("brandName", brandName);
		params.put("brandCode", brandCode);
		params.put("formatsId", formatsId);
		params.put("state3", BrandTreeStateEnum.DELETE.getValue()+"");
		BasePageResultVo baseResultVo=gwbrandtreeService.getBrandTreeBySionPageList(params);
		//liger ui 分页格式数据
		LigerPageDataVo data=new LigerPageDataVo();
		data.setRows(baseResultVo.getRows());
		data.setTotal(baseResultVo.getPageInfo().getTotalRecord());
		return data;
	}
	

	/**
	 * 
	 * getBrandTreeByConfirm:获取待确认品牌信息集合（分页）
	 *
	 * @date 2016年3月11日
	 * @param page   当前页码数
	 * @param pagesize      每页显示记录数
	 * @param request
	 * @return
	 */
	@RequestMapping("/getBrandTreeByConfirm.do")
	@ResponseBody
	public LigerPageDataVo getBrandTreeByConfirm(int currentPage,int pageSize,String brandName,String brandCode,Integer formatsId,HttpServletRequest request){
		//条件参数
		Map<String, Object> params=new HashMap<String, Object>();
		params.put("currentPage", currentPage);
		params.put("pageSize", pageSize);
		params.put("brandName", brandName);
		params.put("brandCode", brandCode);
		params.put("formatsId", formatsId);
		params.put("state1", BrandTreeStateEnum.CONFIRM.getValue());
		params.put("state2", BrandTreeStateEnum.UNCONFIRM.getValue());
		BasePageResultVo baseResultVo=gwbrandtreeService.selectPageList(params);
		//liger ui 分页格式数据
		LigerPageDataVo data=new LigerPageDataVo();
		data.setRows(baseResultVo.getRows());
		data.setTotal(baseResultVo.getPageInfo().getTotalRecord());
		return data;
	}
	
	/**
	 * 
	 * getBrandTreeByUnConfirm:获取待取消确认品牌信息集合（分页）
	 *
	 * @date 2016年3月11日
	 * @param page   当前页码数
	 * @param pagesize      每页显示记录数
	 * @param request
	 * @return
	 */
	@RequestMapping("/getBrandTreeByUnConfirm.do")
	@ResponseBody
	public LigerPageDataVo getBrandTreeByUnConfirm(int currentPage,int pageSize,String brandName,String brandCode,Integer formatsId,HttpServletRequest request){
		//条件参数
		Map<String, Object> params=new HashMap<String, Object>();
		params.put("currentPage", currentPage);
		params.put("pageSize", pageSize);
		params.put("brandName", brandName);
		params.put("brandCode", brandCode);
		params.put("formatsId", formatsId);
		params.put("state",BrandTreeStateEnum.PASSCONFIRM.getValue());
		BasePageResultVo baseResultVo=gwbrandtreeService.selectPageList(params);
		//liger ui 分页格式数据
		LigerPageDataVo data=new LigerPageDataVo();
		data.setRows(baseResultVo.getRows());
		data.setTotal(baseResultVo.getPageInfo().getTotalRecord());
		return data;
	}
	/**
	 * 
	 * addBrandTree:添加品牌管理数据
	 *
	 * @date 2016年3月14日
	 * @param GwformatstreeModel
	 * @return
	 */
	@RequestMapping("/addBrandTree.do")
	@ResponseBody
	public BaseResultVo addBrandTree(GwbrandtreeModel gwbrandtreeModel,HttpServletResponse response){
		
		if(!ValidateUtil.isAvailableAccountStr(gwbrandtreeModel.getBm(), 2, 20)){
			return BaseResultVo.responseFail("品牌编号为2-20位的字符");
		}
		
		//根据业态id获取业态信息
		GwformatstreeModel formats = gwformatstreeService.selectById(gwbrandtreeModel.getGwFormatsTreeId());
		//业态编号
		String formatsCode = formats.getBm();
		//品牌编号
		String code = gwbrandtreeModel.getBm();
		//更新时间
		gwbrandtreeModel.setTime(DateUtil.getCurrentDatetime("-"));
		gwbrandtreeModel.setState(1);
		gwbrandtreeModel.setBm(formatsCode+code);
		GwbrandtreeModel brandtree = gwbrandtreeService.getBrandTreeByCode(gwbrandtreeModel.getBm());
		if(brandtree!=null){
			return BaseResultVo.responseFail("品牌编号已存在");	
		}
		int number = gwbrandtreeService.insert(gwbrandtreeModel);
		if(number<=0){
			return BaseResultVo.responseFail("添加失败");
		}
		return BaseResultVo.responseSuccess("添加成功");
	}
	/**
	 * 
	 * deleBrandTree:删除品牌管理数据
	 *
	 * @date 2016年3月14日
	 * @param GwbrandtreeModel      品牌管理对象
	 * @return
	 */
	@RequestMapping("/deleBrandTree.do")
	@ResponseBody
	public BaseResultVo deleBrandTree(int id,HttpServletRequest request){
		BaseResultVo baseResultVo=new BaseResultVo();
		Status status=new Status();
		status.setCode(ResponseCode.OPR_SUCCESS);//提示代码
		status.setMsg("操作成功");//提示信息
		status.setDebugMsg("");//bug信息
		status.setUrl("");//url
		
		if(id==0){
			status.setCode(ResponseCode.OPR_FAIL);
			status.setMsg("数据异常");//提示信息
			baseResultVo.setStatus(status);
			return baseResultVo;
		}
		//新建一个品牌对象
		GwbrandtreeModel brandtree = new GwbrandtreeModel();
		brandtree.setId(id);
		brandtree.setState(0);
		int num=gwbrandtreeService.update(brandtree);
		if(num<0){
			status.setCode(ResponseCode.OPR_FAIL);
			status.setMsg("操作失败");//提示信息
		}
		baseResultVo.setStatus(status);
		return baseResultVo;
	}
	/**
	 * 
	 * getBrandTreeById:根据品牌管理id，获取品牌管理信息
	 *
	 * @date 2016年3月14日
	 * @param id
	 * @param request
	 * @return
	 */
	@RequestMapping("/getBrandTreeById.do")
	@ResponseBody
	public BaseResultVo getBrandTreeById(int id,HttpServletRequest request){
		BaseResultVo baseResultVo=new BaseResultVo();
		Status status=new Status();
		status.setCode(ResponseCode.OPR_SUCCESS);//提示代码
		status.setMsg("操作成功");//提示信息
		status.setDebugMsg("");//bug信息
		status.setUrl("");//url
		
		if(id==0){
			status.setCode(ResponseCode.OPR_FAIL);
			status.setMsg("数据异常");//提示信息
			baseResultVo.setStatus(status);
			return baseResultVo;
		}
		
		//获取品牌管理信息
		GwbrandtreeModel gwbrandtreeModel=gwbrandtreeService.selectById(id);
		baseResultVo.setData(gwbrandtreeModel);
		baseResultVo.setStatus(status);
		return baseResultVo;
	}
	/**
	 * 
	 * updateBrandTree:更新品牌管理数据
	 *
	 * @date 2016年3月14日
	 * @param GwbrandtreeModel       品牌管理对象
	 * @return
	 */
	@RequestMapping("/updateBrandTree.do")
	@ResponseBody
	public BaseResultVo updateBrandTree(GwbrandtreeModel gwbrandtreeModel){
		BaseResultVo baseResultVo=new BaseResultVo();
		Status status=new Status();
		status.setCode(ResponseCode.OPR_SUCCESS);//提示代码
		status.setMsg("操作成功");//提示信息
		status.setDebugMsg("");//bug信息
		status.setUrl("");//url
		if(!ValidateUtil.isAvailableAccountStr(gwbrandtreeModel.getBm(), 3, 8)){
			return BaseResultVo.responseFail("品牌编号为3-8位的字符");
		}
		//验证主键是否为空
		if(gwbrandtreeModel.getId()==0){
			status.setCode(ResponseCode.OPR_FAIL);
			status.setMsg("数据异常");
			baseResultVo.setStatus(status);
			return baseResultVo;
		}
		GwbrandtreeModel gwbrandtree=gwbrandtreeService.selectById(gwbrandtreeModel.getId());
		GwbrandtreeModel brandtree = gwbrandtreeService.getBrandTreeByCode(gwbrandtreeModel.getBm());
		if(!gwbrandtree.getBm().equals(gwbrandtreeModel.getBm())&&brandtree!=null){
			return BaseResultVo.responseFail("品牌编号已存在");	
		}
		//更新时间
		gwbrandtreeModel.setTime(DateUtil.getCurrentDatetime("-"));
		
		//更新品牌管理
		gwbrandtreeService.update(gwbrandtreeModel);
		baseResultVo.setStatus(status);
		return baseResultVo;
	}
	/**
	 * 
	 * getBrandTreeList:获取所有品牌集合
	 *
	 * @date 2016年3月14日
	 * @return
	 */
	@RequestMapping("/getBrandTreeList.do")
	@ResponseBody
	public BaseResultVo getBrandTreeList(){

		//获取所有品牌
		List<GwbrandtreeModel> brandTreeList=gwbrandtreeService.getAllList();
		List<GwformatstreeModel> formatsTreeList=gwformatstreeService.getAllList();
		List<HashMap<String, Object>> treeList=new ArrayList<HashMap<String,Object>>();
		for (GwbrandtreeModel menuTree : brandTreeList) {
				HashMap<String, Object> map=new HashMap<String, Object>();
				map.put("id", menuTree.getId());//菜单id
				map.put("pid", "m_"+menuTree.getGwFormatsTreeId());//父级菜单id
				map.put("text", menuTree.getName()+"【"+menuTree.getBm()+"】");//菜单名称
				map.put("isExpand", true);
				map.put("icon", "/images/icons/brand.png");
				treeList.add(map);
		}
		for (GwformatstreeModel formatstree : formatsTreeList ) {
	    	HashMap<String, Object> map=new HashMap<String, Object>();
			map.put("id", "m_"+formatstree.getId());//菜单id
			map.put("pid", "m_"+formatstree.getFid());//父级菜单id
			map.put("text", formatstree.getName()+"【"+formatstree.getBm()+"】");//菜单名称
			map.put("isExpand", true);
			map.put("icon", "/images/icons/format.png");
			treeList.add(map);
	    }
				
		BaseResultVo baseResultVo=BaseResultVo.responseSuccess("获取所有品牌成功");
		baseResultVo.setData(treeList);
		return baseResultVo;
}
	@RequestMapping("/getBrandTreeL.do")
	@ResponseBody
	public BaseResultVo getBrandTreeL(){
		//获取所有品牌集合
		List<GwbrandtreeModel> MallInfoList=gwbrandtreeService.getAllList();
		BaseResultVo baseResultVo=BaseResultVo.responseSuccess("获取所有集体成功");
		baseResultVo.setData(MallInfoList);
		return baseResultVo;
	}
	@RequestMapping("/getAllBrandTree.do")
	@ResponseBody
	public Object getAllBrandTree(){
		//获取所有品牌集合
		List<GwbrandtreeModel> brandList=gwbrandtreeService.getAllList();
		List<HashMap<String,Object>> list=new ArrayList<HashMap<String,Object>>();
		for (GwbrandtreeModel brandtree : brandList) {
			HashMap<String,Object> map=new HashMap<String,Object>();
			map.put("id", brandtree.getId());
			map.put("text", brandtree.getName());
			list.add(map);
		}
		return list;
	}
	
	@RequestMapping("/getAllBrandTreeByBm.do")
	@ResponseBody
	public Object getAllBrandTreeByBm(){
		//获取所有品牌集合
		List<GwbrandtreeModel> brandList=gwbrandtreeService.getAllList();
		List<HashMap<String,Object>> list=new ArrayList<HashMap<String,Object>>();
		for (GwbrandtreeModel brandtree : brandList) {
			HashMap<String,Object> map=new HashMap<String,Object>();
			map.put("id", brandtree.getBm());
			map.put("text", brandtree.getName());
			list.add(map);
		}
		return list;
	}
	
	/**
	 * 获取所有品牌数据（分页）
	 * @param queryCondition 查询参数
	 * @return
	 */
	@RequestMapping("/getBrandTreeListByPage.do")
	@ResponseBody
	public LigerPageDataVo getBrandTreeListByPage(QueryConditon queryCondition){
		//查询条件数组字符串（前端传递的字符串名称需和xml查询名称一致）
		String[] queryParamArr=new String[]{"brandName"};
		//获取分页参数信息map
		Map<String, Object> params=QueryConditionUtil.getParamsMap(queryParamArr, queryCondition);
		params.put("state", BrandTreeStateEnum.PASSCONFIRM.getValue());
		BasePageResultVo baseResultVo=gwbrandtreeService.selectPageList(params);
		LigerPageDataVo data=new LigerPageDataVo();
		data.setRows(baseResultVo.getRows());
		data.setTotal(baseResultVo.getPageInfo().getTotalRecord());
		return data;
	}
	
	/**
	 * 获取已签约品牌数据（分页）
	 * @param queryCondition 查询参数
	 * @return
	 */
	@RequestMapping("/getBrandTreeListSignByPage.do")
	@ResponseBody
	public LigerPageDataVo getBrandTreeListSignByPage(QueryConditon queryCondition){
		//查询条件数组字符串（前端传递的字符串名称需和xml查询名称一致）
		String[] queryParamArr=new String[]{"brandName"};
		//获取分页参数信息map
		Map<String, Object> params=QueryConditionUtil.getParamsMap(queryParamArr, queryCondition);
		BasePageResultVo baseResultVo=gwbrandtreeService.getBrandTreeBySionPageList(params);
		LigerPageDataVo data=new LigerPageDataVo();
		data.setRows(baseResultVo.getRows());
		data.setTotal(baseResultVo.getPageInfo().getTotalRecord());
		return data;
	}
	
	/**
	 * 确认品牌
	 * @param id
	 * @param request
	 * @return
	 */
	@RequestMapping("/confirmBrand.do")
	@ResponseBody
	public BaseResultVo confirmBrand(Integer id,HttpServletRequest request){
		if(id==0){
			return BaseResultVo.responseFail("主键为空");
		}
		AdminUser adminUser=SecurityUtil.getAdminUser(request);
		GwbrandtreeModel brandTree = new GwbrandtreeModel();
		brandTree.setId(id);
		brandTree.setConfirmUserId(adminUser.getUserId());
		brandTree.setState(2);
		brandTree.setConfirmTime(DateUtil.getCurrentDatetime("-"));
		int number = gwbrandtreeService.update(brandTree);
		if(number<0){
			return BaseResultVo.responseFail("确认失败");
		}
		return BaseResultVo.responseSuccess("确认成功");
	}
	

	/**
	 * 取消确认品牌
	 * @param id
	 * @param request
	 * @return
	 */
	@RequestMapping("/unConfirmBrand.do")
	@ResponseBody
	public BaseResultVo unConfirmBrand(Integer id,HttpServletRequest request,String code){
		if(id==0){
			return BaseResultVo.responseFail("主键为空");
		}
		GwbrandtreeModel brand = gwbrandtreeService.getBrandTreeSignByCode(code);
		if(brand!=null){
			return BaseResultVo.responseFail("该品牌已签约,不能取消确认!");
		}
		AdminUser adminUser=SecurityUtil.getAdminUser(request);
		GwbrandtreeModel brandTree = new GwbrandtreeModel();
		brandTree.setId(id);
		brandTree.setUnconfirmUserId(adminUser.getUserId());
		brandTree.setState(3);
		brandTree.setUnconfirmTime(DateUtil.getCurrentDatetime("-"));
		int number = gwbrandtreeService.update(brandTree);
		if(number<0){
			return BaseResultVo.responseFail("取消确认失败");
		}
		return BaseResultVo.responseSuccess("取消确认成功");
	}
}

