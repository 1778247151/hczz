package com.crm.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.crm.common.AdminUser;
import com.crm.common.BasePageResultVo;
import com.crm.common.BaseResultVo;
import com.crm.common.LigerPageDataVo;
import com.crm.common.QueryConditon;
import com.crm.common.ResponseCode;
import com.crm.common.SecurityUtil;
import com.crm.common.Status;
import com.crm.enums.CardStateEnum;
import com.crm.enums.MembersCardTypeEnum;
import com.crm.interceptor.BussAnnotation;
import com.crm.interceptor.exception.BaseException;
import com.crm.pojo.GwMemberCardModel;
import com.crm.service.GwMemberCardService;
import com.crm.util.DateUtil;
import com.crm.util.ExcelUtil;
import com.crm.util.QueryConditionUtil;


/**
 * 
 * 
 * GwMemberCardController:会员卡管理控制层
 *
 * @author  shengjinpeng
 * @date    2016年11月2日
 * @version jdk1.8
 *
 */
@Controller
@RequestMapping("/memberCard")
public class GwMemberCardController extends BaseException {

	// 日志
	private Logger logger = LoggerFactory.getLogger(GwMemberCardController.class);

	/**
	 * 会员卡管理业务逻辑
	 */
	@Resource(name = "gwMemberCardServiceManage")
	private GwMemberCardService gwMemberCardServiceImpl;
	
	/**
	 * 
	 * addMemberCard:添加会员卡
	 *
	 * @author   shengjinpeng
	 * @date     2016年11月2日
	 *
	 * @param gwMemberCardModel 
	 * 						会员卡信息对象
	 * @return
	 */
	@RequestMapping("/addMemberCard.do")
	@ResponseBody
	public BaseResultVo addMemberCard(GwMemberCardModel gwMemberCardModel, HttpServletResponse response,HttpServletRequest request) {
		
		GwMemberCardModel memberCard = gwMemberCardServiceImpl.getMemberCardByCode(gwMemberCardModel.getCardCode());
		if(memberCard!=null) {
			return BaseResultVo.responseFail("会员卡编号已存在!");
		}
		
		BaseResultVo baseResultVo = new BaseResultVo();
		Status status = new Status();
		status.setCode(ResponseCode.OPR_SUCCESS);// 提示代码
		status.setMsg("操作成功");// 提示信息
		status.setDebugMsg("");// bug信息
		status.setUrl("");// url
		baseResultVo.setStatus(status);
		//获取创建人信息
		AdminUser adminUser=SecurityUtil.getAdminUser(request);
		String username = adminUser.getUsername();

		//创建人
		gwMemberCardModel.setCreateUserId(adminUser.getUserId());
		//创建时间
		gwMemberCardModel.setCreateTime(DateUtil.getCurrentDatetime("-"));
		//会员卡状态
		gwMemberCardModel.setStatus(CardStateEnum.CONFIRM.getValue());
		//插入一条会员卡记录
		gwMemberCardServiceImpl.insert(gwMemberCardModel);
		logger.info(username+"新增了一条memberCardId为"+gwMemberCardModel.getId()+"的会员卡");
		return baseResultVo;
	}
	
	/**
	 * 
	 * batchAddMemberCard:批量添加
	 *
	 * @author   shengjinpeng
	 * @date     2016年11月2日
	 *
	 * @param gwMemberCardModel 
	 * 						会员卡信息对象
	 * @return
	 */
	@RequestMapping("/batchAddMemberCard.do")
	@ResponseBody
	public BaseResultVo batchAddMemberCard(GwMemberCardModel gwMemberCardModel,String startCardCode,String endCardCode, HttpServletResponse response,HttpServletRequest request) {
		
		GwMemberCardModel memberCard = gwMemberCardServiceImpl.getMemberCardByCode(gwMemberCardModel.getCardCode());
		if(memberCard!=null) {
			return BaseResultVo.responseFail("会员卡编号已存在!");
		}
		
		BaseResultVo baseResultVo = new BaseResultVo();
		Status status = new Status();
		status.setCode(ResponseCode.OPR_SUCCESS);// 提示代码
		status.setMsg("操作成功");// 提示信息
		status.setDebugMsg("");// bug信息
		status.setUrl("");// url
		baseResultVo.setStatus(status);
		//获取创建人信息
		AdminUser adminUser=SecurityUtil.getAdminUser(request);
		String username = adminUser.getUsername();

		//创建人
		gwMemberCardModel.setCreateUserId(adminUser.getUserId());
		//创建时间
		gwMemberCardModel.setCreateTime(DateUtil.getCurrentDatetime("-"));
		//会员卡状态
		gwMemberCardModel.setStatus(CardStateEnum.CONFIRM.getValue());
		//插入一条会员卡记录
		int number = gwMemberCardServiceImpl.insertList(gwMemberCardModel,startCardCode,endCardCode);
		
		
		if(number==-1) {
			return BaseResultVo.responseFail("该卡号段已有卡号存在，无法添加");
	
		}
		return baseResultVo;
	}

	/**
	 * 
	 * updateMemberCard:更新会员卡信息
	 *
	 * @author   shengjinpeng
	 * @date     2016年11月2日
	 *
	 * @param gwMemberCardModel 
	 * 						会员卡信息对象
	 * @return
	 */
	@RequestMapping("/updateMemberCard.do")
	@ResponseBody
	public BaseResultVo updateMemberCard(GwMemberCardModel gwMemberCardModel,HttpServletRequest request) {
		BaseResultVo baseResultVo = new BaseResultVo();
		Status status = new Status();
		status.setCode(ResponseCode.OPR_SUCCESS);// 提示代码
		status.setMsg("操作成功");// 提示信息
		status.setDebugMsg("");// bug信息
		status.setUrl("");// url
		if (gwMemberCardModel.getId() == 0) {
			status.setCode(ResponseCode.OPR_FAIL);
			status.setMsg("数据异常");// 提示信息
			baseResultVo.setStatus(status);
			return baseResultVo;
		}
		
		//得到修改人信息
		AdminUser adminUser=SecurityUtil.getAdminUser(request);
		String username = adminUser.getUsername();

		//更新会员卡信息
		gwMemberCardServiceImpl.update(gwMemberCardModel);
		logger.info(username+"更新了memberCardId为"+gwMemberCardModel.getId()+"的会员卡");
		baseResultVo.setStatus(status);
		return baseResultVo;
	}

	/**
	 * 
	 * getMemberCardList:获取会员卡列表（分页）
	 *
	 * @author   shengjinpeng
	 * @date     2016年11月2日
	 *
	 * @param currentPage  
	 * 					当前页
	 * @param pageSize  
	 * 				每页记录数
	 * @return
	 */
	@RequestMapping("/getMemberCardList.do")
	@ResponseBody
	public LigerPageDataVo getMemberCardList(int currentPage, int pageSize, String cardCode,String startTime,String endTime,String grade,HttpServletRequest request) {
		// 条件参数
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("currentPage", currentPage);
		params.put("pageSize", pageSize);
		params.put("cardCode", cardCode);
		params.put("startTime", startTime);
		params.put("endTime", endTime);
		params.put("grade", grade);

		BasePageResultVo baseResultVo = gwMemberCardServiceImpl.selectPageList(params);
		// liger ui 分页格式数据
		LigerPageDataVo data = new LigerPageDataVo();

		data.setRows(baseResultVo.getRows());
		data.setTotal(baseResultVo.getPageInfo().getTotalRecord());
		return data;
	}

	/**
	 * 
	 * getMemberCardById:根据会员卡id，获取会员卡信息
	 *
	 * @author   shengjinpeng
	 * @date     2016年11月2日
	 *
	 * @param id
	 * @param request
	 * @return
	 */
	@RequestMapping("/getMemberCardById.do")
	@ResponseBody
	public BaseResultVo getMemberCardById(int id, HttpServletRequest request) {
		BaseResultVo baseResultVo = new BaseResultVo();
		Status status = new Status();
		status.setCode(ResponseCode.OPR_SUCCESS);// 提示代码
		status.setMsg("操作成功");// 提示信息
		status.setDebugMsg("");// bug信息
		status.setUrl("");// url

		if (id == 0) {
			status.setCode(ResponseCode.OPR_FAIL);
			status.setMsg("数据异常");// 提示信息
			baseResultVo.setStatus(status);
			return baseResultVo;
		}

		// 获取管理员用户信息
		GwMemberCardModel gwMemberCardModel = gwMemberCardServiceImpl.selectById(id);
		baseResultVo.setData(gwMemberCardModel);
		baseResultVo.setStatus(status);
		return baseResultVo;
	}

	/**
	 * 
	 * deleteMemberCardById:根据会员卡id，删除会员卡
	 *
	 * @author   shengjinpeng
	 * @date     2016年11月2日
	 *
	 * @param id
	 * @param request
	 * @return
	 */
	@RequestMapping("/deleteMemberCardById.do")
	@ResponseBody
	public BaseResultVo deleteMemberCardById(int id, HttpServletRequest request) {
		BaseResultVo baseResultVo = new BaseResultVo();
		Status status = new Status();
		status.setCode(ResponseCode.OPR_SUCCESS);// 提示代码
		status.setMsg("操作成功");// 提示信息
		status.setDebugMsg("");// bug信息
		status.setUrl("");// url
		String username = SecurityUtil.getAdminUser(request).getUsername();
		if (id == 0) {
			status.setCode(ResponseCode.OPR_FAIL);
			status.setMsg("数据异常");// 提示信息
			baseResultVo.setStatus(status);
			return baseResultVo;
		}
		
		gwMemberCardServiceImpl.deleteById(id);
		logger.info(username+"删除了memberCardId为"+id+"的会员卡");
		baseResultVo.setStatus(status);
		return baseResultVo;
	}

	@RequestMapping("/getAllMemberCardGrid.do")
	@ResponseBody
	public LigerPageDataVo getAllMemberCardGrid(QueryConditon queryCondition,int currentPage, int pageSize, HttpServletRequest request) {
		//查询条件数组字符串（前端传递的字符串名称需和xml查询名称一致）
		String[] queryParamArr = new String[] { "cardCode", "card_type","grade"};
		//获取分页参数信息map
		Map<String, Object> params=QueryConditionUtil.getParamsMap(queryParamArr, queryCondition);
		params.put("currentPage", currentPage);
		params.put("pageSize", pageSize);
		params.put("status", CardStateEnum.CONFIRM.getValue());
		BasePageResultVo baseResultVo = gwMemberCardServiceImpl.selectPageList(params);
		// liger ui 分页格式数据
		LigerPageDataVo data = new LigerPageDataVo();
		data.setRows(baseResultVo.getRows());
		data.setTotal(baseResultVo.getPageInfo().getTotalRecord());
		return data;
	}
	
	/**
	 * 
	 * getAllNormalUseCardCode:获取所有正在使用的卡号
	 *
	 * @author meishengjun
	 * @date 2016年10月25日
	 *

	 */

	@RequestMapping("/getAllNormalUseCardCode.do")
	@ResponseBody
	public List<GwMemberCardModel> getAllNormalUseCardCode(){
		
		List<GwMemberCardModel> gwMemberCardModel=	gwMemberCardServiceImpl.getAllNormalUseCardCode();

		return gwMemberCardModel;
		
	}
	/**
	 * 
	 * getAllNoUseCardCode:获取所有未使用的卡号
	 *
	 * @author meishengjun
	 * @date 2016年11月8日
	 *

	 */
	
	@RequestMapping("/getAllNoUseCardCode.do")
	@ResponseBody
	public LigerPageDataVo getAllNoUseCardCode(QueryConditon queryCondition,int currentPage, int pageSize, HttpServletRequest request){
		//查询条件数组字符串（前端传递的字符串名称需和xml查询名称一致）
		String[] queryParamArr = new String[] { "cardCode", "card_type","status","grade"};
		//获取分页参数信息map
		Map<String, Object> params=QueryConditionUtil.getParamsMap(queryParamArr, queryCondition);
		params.put("currentPage", currentPage);
		params.put("pageSize", pageSize);

		BasePageResultVo baseResultVo = gwMemberCardServiceImpl.selectPageList(params);
		// liger ui 分页格式数据
		LigerPageDataVo data = new LigerPageDataVo();
		data.setRows(baseResultVo.getRows());
		data.setTotal(baseResultVo.getPageInfo().getTotalRecord());
		return data;
		
	}
	/**
	 * 
	 * exportExcel:批量导出EXCEL
	 *@author meishengjun
	 * @date 2016年11月8日
	 * @param request
	 * @return
	 */
	@RequestMapping("/exportsExcel.do")
	@BussAnnotation(moduleName = "会员卡", option = "导出Excel")
	public void exportExcel(HttpServletRequest request, HttpServletResponse response) {

		List<GwMemberCardModel> list = gwMemberCardServiceImpl.getAllList();
		List<GwMemberCardModel> newList = new ArrayList<>();
		for (GwMemberCardModel model : list) {
			model.setStatusName(CardStateEnum.getDisplayName(model.getStatus()));
			model.setCardTypeName(MembersCardTypeEnum.getDisplayName(model.getCardType()));
			newList.add(model);
		}
		String[] columnArr = { "cardCode", "cardTypeName", "gradeName", "statusName", "openDate", "createTime", "createUserName",
				};
		String[] headerAtrr = { "卡片编号", "卡号类型", "会员等级", "使用状态 ", "开卡日期", "开卡时间", "开卡人"};
		int[] colWidthArr = { 20, 20, 20, 20, 20, 20, 20,};
		try {
			boolean flag = ExcelUtil.exportExcel("会员卡表", newList, columnArr, headerAtrr, colWidthArr, request, response);
			if (!flag) {
				logger.info("导出Excel出错");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

	}
	
	
	
}
