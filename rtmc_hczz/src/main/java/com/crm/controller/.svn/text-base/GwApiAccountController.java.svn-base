package com.crm.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.crm.common.AdminUser;
import com.crm.common.BasePageResultVo;
import com.crm.common.BaseResultVo;
import com.crm.common.LigerPageDataVo;
import com.crm.common.ResponseCode;
import com.crm.common.SecurityUtil;
import com.crm.common.Status;
import com.crm.interceptor.BussAnnotation;
import com.crm.pojo.GwApiAccountModel;
import com.crm.service.GwApiAccountService;
import com.crm.util.DateUtil;

@Controller
@RequestMapping("/apiAccount")
public class GwApiAccountController {
	// 日志
	private Logger logger = LoggerFactory.getLogger(GwApiAccountController.class);

	@Resource(name = "apiAccountServiceManage")
	private GwApiAccountService apiAccountServiceImpl;

	/**
	 * 
	 * getApiAccountList: 数据分页
	 * 
	 * @author hemingjun
	 * @date 2016年9月20日
	 * @param currentPage
	 * @param pageSize
	 * @param account
	 * @return
	 */
	@RequestMapping("/getApiAccountList.do")
	@ResponseBody
	public LigerPageDataVo getApiAccountList(int currentPage, int pageSize, String account) {
		// 条件参数
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("currentPage", currentPage);
		params.put("pageSize", pageSize);

		params.put("account", account);
		BasePageResultVo baseResultVo = apiAccountServiceImpl.selectPageList(params);
		// liger ui 分页格式数据
		LigerPageDataVo data = new LigerPageDataVo();
		data.setRows(baseResultVo.getRows());
		data.setTotal(baseResultVo.getPageInfo().getTotalRecord());
		return data;
	}

	/**
	 * 
	 * getApiAccountById: 通过id查询账号认证信息
	 * 
	 * @author hemingjun
	 * @date 2016年9月20日
	 * @param account
	 * @param request
	 * @return
	 */
	@RequestMapping("/getApiAccountById.do")
	@ResponseBody
	public BaseResultVo getApiAccountById(int id, HttpServletRequest request) {
		// 条件参数
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("account", "account");
		GwApiAccountModel model = apiAccountServiceImpl.getApiAccountById(id);
		BaseResultVo baseResultVo = new BaseResultVo();
		baseResultVo.setData(model);
		Status status = new Status();
		status.setCode(ResponseCode.OPR_SUCCESS);
		baseResultVo.setStatus(status);
		return baseResultVo;
	}

	/**
	 * 
	 * updateApiAccount: 更新账号认证信息
	 * 
	 * @author hemingjun
	 * @date 2016年9月20日
	 * @param account
	 * @param request
	 * @return
	 */
	@RequestMapping("/updateApiAccount.do")
	@ResponseBody
	public BaseResultVo updateApiAccount(GwApiAccountModel apiAccountModel, HttpServletRequest request) {
		BaseResultVo baseResultVo = new BaseResultVo();
		AdminUser adminUser = SecurityUtil.getAdminUser(request);
		apiAccountModel.setUpdateTime(DateUtil.getCurrentDatetime("-"));
		apiAccountModel.setUpdateUserId(adminUser.getUserId());
		int number = apiAccountServiceImpl.updateApiAccount(apiAccountModel);
		if (number > 0) {
			return baseResultVo.responseSuccess("更改成功");
		} else {
			return baseResultVo.responseFail("更改失败");
		}
	}
	
	/**
	 * 
	 * insertApiAccount: 插入账号认证信息
	 * 
	 * @author hemingjun
	 * @date 2016年9月20日
	 * @param account
	 * @param request
	 * @return
	 */
	@RequestMapping("/insertApiAccount.do")
	@ResponseBody
	public BaseResultVo insertApiAccount(GwApiAccountModel apiAccountModel, HttpServletRequest request) {
		BaseResultVo baseResultVo = new BaseResultVo();
		List<GwApiAccountModel> gwApiAccountList=apiAccountServiceImpl.getAllList();
		for (GwApiAccountModel model : gwApiAccountList) {
			if(model.getAccount().equals(apiAccountModel.getAccount())){
				return baseResultVo.responseFail("添加失败,认证账号已存在");
			}
		}
		AdminUser adminUser = SecurityUtil.getAdminUser(request);
		apiAccountModel.setCreateTime(DateUtil.getCurrentDatetime("-"));
		apiAccountModel.setCreateUserId(adminUser.getUserId());
		int number = apiAccountServiceImpl.insert(apiAccountModel);
		if (number > 0) {
			return baseResultVo.responseSuccess("添加成功");
		} else {
			return baseResultVo.responseFail("添加失败");
		}
	}
	
	/**
	 * 
	 * delApiAccount:根据id删除账号认证信息
	 *
	 * @author hemingjun
	 * @date 2016年9月21日
	 * @param id
	 * @param request
	 * @return
	 */
	@RequestMapping("/delApiAccount.do")
	@ResponseBody
	public BaseResultVo delApiAccount(int id, HttpServletRequest request) {
		BaseResultVo baseResultVo = new BaseResultVo();
		Status status = new Status();
		status.setCode(ResponseCode.OPR_SUCCESS);// 提示代码
		status.setMsg("操作成功");// 提示信息
		status.setDebugMsg("");// bug信息
		status.setUrl("");// url

		if (id == 0) {
			status.setCode(ResponseCode.OPR_FAIL);
			status.setMsg("数据异常");// 提示信息
			baseResultVo.setStatus(status);
			return baseResultVo;
		}

		int num = apiAccountServiceImpl.deleteById(id);

		if (num < 0) {
			status.setCode(ResponseCode.OPR_FAIL);
			status.setMsg("操作失败");// 提示信息
		}
		baseResultVo.setStatus(status);
		return baseResultVo;
	}
}
