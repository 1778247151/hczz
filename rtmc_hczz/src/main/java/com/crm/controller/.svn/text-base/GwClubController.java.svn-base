package com.crm.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.crm.common.AdminUser;
import com.crm.common.BasePageResultVo;
import com.crm.common.BaseResultVo;
import com.crm.common.LigerPageDataVo;
import com.crm.common.ResponseCode;
import com.crm.common.SecurityUtil;
import com.crm.common.Status;
import com.crm.interceptor.exception.BaseException;
import com.crm.pojo.GwGoodsInStoreModel;
import com.crm.pojo.GwClubModel;
import com.crm.service.GwClubService;
import com.crm.util.BaseCodeUtil;
import com.crm.util.DateUtil;

/**
 * 
 * GwClubController:俱乐部控制层
 *
 * @author hanzhiqiang
 * @date 2016年11月11日
 * @version jdk.8
 *
 */
@Controller
@RequestMapping("/club")
public class GwClubController  extends BaseException {
	// 日志
		private Logger logger = LoggerFactory.getLogger(GwClubController.class);
	/**
	 * 管理业务逻辑
	 */
	@Resource(name = "gwClubServiceManage")
	private GwClubService gwClubServiceImpl;
		
		/**
		 *
		 * getClubList:获取信息列表（分页）
		 *
		 * @author   hanzhiqiang
		 * @date     2016年11月8日
		 *
		 * @param currentPage  
		 * 					当前页
		 * @param pageSize  
		 * 				每页记录数
		 * @return
		 */
		@RequestMapping("/getClubList.do")
		@ResponseBody
		public LigerPageDataVo getClubList(String description,String startDate,String code,int currentPage, int pageSize, HttpServletRequest request) {
			// 条件参数
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("currentPage", currentPage);
			params.put("pageSize", pageSize);
			params.put("code", code);
			params.put("description", description);
			params.put("startDate", startDate);
			
			BasePageResultVo baseResultVo = gwClubServiceImpl.selectPageList(params);
			// liger ui 分页格式数据
			LigerPageDataVo data = new LigerPageDataVo();
			data.setRows(baseResultVo.getRows());
			data.setTotal(baseResultVo.getPageInfo().getTotalRecord());
			return data;
		}
		
		/**
		 *
		 * addClub:添加
		 *
		 * @author   hanzhiqiang
		 * @date     2016年11月8日
		 *
		 * @param currentPage  
		 * 					当前页
		 * @param pageSize  
		 * 				每页记录数
		 * @return
		 */
		@RequestMapping("/addClub.do")
		@ResponseBody
		public BaseResultVo addClub(GwClubModel gwClubModel,HttpServletRequest request) {
			
			BaseResultVo baseResultVo = new BaseResultVo();
			Status status = new Status();
			status.setCode(ResponseCode.OPR_SUCCESS);// 提示代码
			status.setMsg("操作成功");// 提示信息
			status.setDebugMsg("");// bug信息
			status.setUrl("");// url
			baseResultVo.setStatus(status);
			//获取创建人信息
			AdminUser adminUser=SecurityUtil.getAdminUser(request);
			String username = adminUser.getUsername();

			//创建人
			gwClubModel.setCreateUserId(adminUser.getUserId());
			//创建时间
			gwClubModel.setCreateTime(DateUtil.getCurrentDatetime("-"));
			//插入一条记录
			gwClubServiceImpl.insert(gwClubModel);
			logger.info(username+"新增了一条Id为"+gwClubModel.getId()+"的记录");
			return baseResultVo;
		}
		/**
		 * 
		 * getClubById:根据id，获取信息
		 *
		 * @author   hanzhiqiang
		 * @date     2016年11月9日
		 * @param id
		 * @param request
		 * @return
		 */
		@RequestMapping("/getClubById.do")
		@ResponseBody
		public BaseResultVo getClubById(int id, HttpServletRequest request) {
			//获取信息
			GwClubModel Club=gwClubServiceImpl.selectById(id);
			if(Club==null){
				return BaseResultVo.responseFail("获取信息失败");
			}
			BaseResultVo baseResultVo=BaseResultVo.responseSuccess("获取信息成功");
			baseResultVo.setData(Club);
			return baseResultVo;
		}
		/**
		 * 
		 * deleteClubById:根据id，删除信息
		 *
		 * @author   hanzhiqiang
		 * @date     2016年11月9日
		 *
		 * @param id
		 * @param request
		 * @return
		 */
		@RequestMapping("/deleteClubById.do")
		@ResponseBody
		public BaseResultVo deleteClubById(String date,int id, HttpServletRequest request) {
			
			BaseResultVo baseResultVo = new BaseResultVo();
			Status status = new Status();
			status.setCode(ResponseCode.OPR_SUCCESS);// 提示代码
			status.setMsg("操作成功");// 提示信息
			status.setDebugMsg("");// bug信息
			status.setUrl("");// url
			String username = SecurityUtil.getAdminUser(request).getUsername();
			if (id == 0 || date!=null) {
				status.setCode(ResponseCode.OPR_FAIL);
				status.setMsg("数据异常");// 提示信息
				baseResultVo.setStatus(status);
				return baseResultVo;
			}
			int result=	gwClubServiceImpl.deleteClubById(id);
			if(result<0) System.out.print("删除失败");
			logger.info(username+"删除了Id为"+id+"的信息");
			baseResultVo.setStatus(status);
			return baseResultVo;
		}
		
		/**
		 * 
		 * updateClub:更新信息
		 *
		 * @author   hanzhiqiang
		 * @date     2016年11月9日
		 *
		 * @return
		 */
		@RequestMapping("/updateClub.do")
		@ResponseBody
		public BaseResultVo updateClub(GwClubModel gwClubModel,HttpServletRequest request) {
			BaseResultVo baseResultVo = new BaseResultVo();
			Status status = new Status();
			status.setCode(ResponseCode.OPR_SUCCESS);// 提示代码
			status.setMsg("操作成功");// 提示信息
			status.setDebugMsg("");// bug信息
			status.setUrl("");// url
			if (gwClubModel.getId() == 0) {
				status.setCode(ResponseCode.OPR_FAIL);
				status.setMsg("数据异常");// 提示信息
				baseResultVo.setStatus(status);
				return baseResultVo;
			}
			
			//得到修改人信息
			AdminUser adminUser=SecurityUtil.getAdminUser(request);
			String username = adminUser.getUsername();

			//修改人
			gwClubModel.setUpdateUserId(adminUser.getUserId());
			//更新时间
			gwClubModel.setUpdateTime(DateUtil.getCurrentDatetime("-"));
			//更新信息
			gwClubServiceImpl.update(gwClubModel);
			logger.info(username+"更新了Id为"+gwClubModel.getId()+"的信息");
			baseResultVo.setStatus(status);
			return baseResultVo;
		}
		/**
		 * 
		 * 生成俱乐部的编号
		 *
		 * @date 2016年11月9日
		 * @param id
		 * @param request
		 * @return
		 */
		@RequestMapping("/getClubCode.do")
		@ResponseBody
		public String getClubCode() {
			//获取编号前缀
			String frontCode = BaseCodeUtil.getBaseCode("JLB");
			//获取当天时间
			String time = DateUtil.getCurrentDate("");
			String code = "";
			//根据当天时间查询最后一条记录
			GwClubModel gwClubModel = gwClubServiceImpl.getClubByLastOne(time);
			if(gwClubModel==null){
				code = frontCode+"0001";
			}else{
				String subString = gwClubModel.getCode().substring(3);
				long num = Long.parseLong(subString)+1;
				code = "JLB"+String.valueOf(num);
			}
			return code;
		}
		
		/**
		 * 
		 * getAllClubCode:获取所有俱乐部编号
		 *
		 * @date 2016年11月11日
		 * @return
		 */
		@RequestMapping("/getAllClubCode.do")
		@ResponseBody
		public Object getAllClubCode(){
			//获取所有角色
			List<GwClubModel> Clubs=gwClubServiceImpl.getAllList();
			List<HashMap<String,Object>> list=new ArrayList<HashMap<String,Object>>();
			for (GwClubModel Club : Clubs) {
				HashMap<String,Object> map=new HashMap<String,Object>();
				map.put("code", Club.getCode());
				map.put("text", Club.getCode());
				list.add(map);
			}
			return list;
		}
}
