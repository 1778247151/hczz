package com.crm.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.crm.common.AdminUser;
import com.crm.common.BasePageResultVo;
import com.crm.common.BaseResultVo;
import com.crm.common.LigerPageDataVo;
import com.crm.common.SecurityUtil;
import com.crm.interceptor.BussAnnotation;
import com.crm.pojo.GwCollectRecordModel;
import com.crm.pojo.GwGoodsInStoreDetailModel;
import com.crm.pojo.GwGoodsInStoreModel;
import com.crm.pojo.GwLeaseGoodsModel;
import com.crm.pojo.GwLoseMaintenanceModel;
import com.crm.pojo.GwStoreGoodsModel;
import com.crm.service.GwGoodsInStoreDetailService;
import com.crm.service.GwGoodsInStoreService;
import com.crm.service.GwStoreGoodsService;
import com.crm.util.BaseCodeUtil;
import com.crm.util.DateUtil;
import com.crm.util.JsonMapper;
import com.mysql.fabric.xmlrpc.base.Array;


/**
 * 
 * GwGoodsInStoreController:物品入库维护控制层
 *
 * @author chengpengfei
 * @date 2016年6月23日
 * @version jdk1.8
 *
 */
@Controller
@RequestMapping("goodsInfoStore")
public class GwGoodsInStoreController {
	// 日志
	private Logger logger = LoggerFactory.getLogger(GwGoodsInStoreModel.class);
	/**
	 * 物品入库业务逻辑层
	 */
	@Resource(name="gwGoodsInStoreServiceManage")
	private GwGoodsInStoreService gwGoodsInStoreServiceImpl;
	
	/**
	 * 物品入库明细逻辑
	 */
	@Resource(name="gwGoodsInStoreDetailServiceManage")
	private GwGoodsInStoreDetailService gwGoodsInStoreDetailServiceImpl;
	
	/**
	 * 物品与仓库管理表业务逻辑
	 */
	@Resource(name="gwStoreGoodsServiceManage")
	private GwStoreGoodsService gwStoreGoodsServiceImpl;
	
	/**
	 * 获取物品入库维护数据分页集合
	 * @author chengpengfei
	 * @param  currentPage
	 * @param  pageSize
	 * @return
	 */
	@RequestMapping("/getGoodsInStoreByPageList.do")
	@ResponseBody
	@BussAnnotation(moduleName="礼品入库管理",option="获取列表")
	public LigerPageDataVo getGoodsInStoreByPageList(int currentPage,int pageSize,String status,String code,String inTime){
		//条件参数
		Map<String, Object> params=new HashMap<String, Object>();
		params.put("currentPage", currentPage);
		params.put("pageSize", pageSize);
		params.put("status", status);
		params.put("code", code);
		params.put("inTime", inTime);
		BasePageResultVo baseResultVo=gwGoodsInStoreServiceImpl.selectPageList(params);
		//liger ui 分页格式数据
		LigerPageDataVo data=new LigerPageDataVo();
		data.setRows(baseResultVo.getRows());
		data.setTotal(baseResultVo.getPageInfo().getTotalRecord());
		return data;
	}
	

	/**
	 * 获取物品入库确认数据分页集合
	 * @author chengpengfei
	 * @param  currentPage
	 * @param  pageSize
	 * @return
	 */
	@RequestMapping("/getGoodsInStoreCoufirmByPageList.do")
	@ResponseBody
	@BussAnnotation(moduleName="礼品入库管理",option="获取确认列表")
	public LigerPageDataVo getGoodsInStoreCoufirmByPageList(int currentPage,int pageSize,String code,String inTime){
		//条件参数
		Map<String, Object> params=new HashMap<String, Object>();
		params.put("currentPage", currentPage);
		params.put("pageSize", pageSize);
		params.put("status", "0");
		params.put("code", code);
		params.put("inTime", inTime);
		BasePageResultVo baseResultVo=gwGoodsInStoreServiceImpl.selectPageList(params);
		//liger ui 分页格式数据
		LigerPageDataVo data=new LigerPageDataVo();
		data.setRows(baseResultVo.getRows());
		data.setTotal(baseResultVo.getPageInfo().getTotalRecord());
		return data;
	}
	
	/**
	 * 
	 * 生成物品入库的编号
	 *
	 * @date 206年3月5日
	 * @param id
	 * @param request
	 * @return
	 */
	@RequestMapping("/getGoodsInStoreCode.do")
	@ResponseBody
	public String getGoodsInStoreCode() {
		//获取编号前缀
		String frontCode = BaseCodeUtil.getBaseCode("RK");
		//获取当天时间
		String time = DateUtil.getCurrentDate("");
		String code = "";
		//根据当天时间查询最后一条记录
		GwGoodsInStoreModel goodsInStoreModel = gwGoodsInStoreServiceImpl.getGoodsInStoreByLastOne(time);
		if(goodsInStoreModel==null){
			code = frontCode+"0001";
		}else{
			String subString = goodsInStoreModel.getCode().substring(2);
			long num = Long.parseLong(subString)+1;
			code = "RK"+String.valueOf(num);
		}
		return code;
	}
	/**
	 * 添加物品入库信息
	 * @param goodsInfoStore
	 * @param request
	 * @return
	 */
	@RequestMapping("/addGoodsInStore.do")
	@ResponseBody
	@BussAnnotation(moduleName="礼品入库管理",option="添加")
	public BaseResultVo addGoodsInStore(String goodsInfoStore,HttpServletRequest request,String goodsInStoreDetail){
		if(goodsInfoStore==null){
			return BaseResultVo.responseFail("实体类为空");
		}
		GwGoodsInStoreModel goodsInfoStoreModel =  JsonMapper.buildNonDefaultMapper().fromJson(goodsInfoStore, GwGoodsInStoreModel.class);
		//创建人
		AdminUser adminUser=SecurityUtil.getAdminUser(request);
		goodsInfoStoreModel.setCreateUserId(adminUser.getUserId());
		//修改人
		goodsInfoStoreModel.setUpdateUserId(adminUser.getUserId());
		//创建时间
		goodsInfoStoreModel.setCreateTime(DateUtil.getCurrentDatetime("-"));
		//修改时间
		goodsInfoStoreModel.setUpdateTime(DateUtil.getCurrentDatetime("-"));
		int number = gwGoodsInStoreServiceImpl.insert(goodsInfoStoreModel);
		List<GwGoodsInStoreDetailModel> goodsInStoreList = new ArrayList<>();
		//把字符串转换为List对象
		List<GwGoodsInStoreDetailModel> goodsInStore =JsonMapper.buildNonDefaultMapper().fromJsonToList(goodsInStoreDetail, GwGoodsInStoreDetailModel.class);
		if(goodsInStore!=null && goodsInStore.size()>0){
			for(GwGoodsInStoreDetailModel goods : goodsInStore){
				if((goods.getStoreCode()==null)||("".equals(goods.getStoreCode()))){
					return BaseResultVo.responseFail("请选择仓库名称");
				}
				if(goods.getPrice()==null||"".equals(goods.getPrice())){
					return BaseResultVo.responseFail("请填写礼品单价");
				}
				if(goods.getPrice()==0){
					return BaseResultVo.responseFail("单价必须大于0");
				}
				if(goods.getNumber()==null||"".equals(goods.getNumber())){
					return BaseResultVo.responseFail("请填写入库数量");
				}
				if(goods.getNumber()==0){
					return BaseResultVo.responseFail("入库数量必须大于0");
				}
				//物品入库信息
				goods.setGoodsCode(goods.getGoodsCode());
				goods.setNumber(goods.getNumber());
				goods.setPrice(goods.getPrice());
				goods.setStoreCode(goods.getStoreCode());
				goods.setTotalMoney(goods.getTotalMoney());
				goods.setGoodsInStoreCode(goodsInfoStoreModel.getCode());
				goodsInStoreList.add(goods);
			}
			//批量插入物品入库明细数据
			int batchNumber = gwGoodsInStoreDetailServiceImpl.batchInsertGoodsInStoreDeatil(goodsInStoreList);
			if(batchNumber<0){
				return BaseResultVo.responseFail("添加物品入库清单失败");
			}
		}
		if(number<0){
			return BaseResultVo.responseFail("添加失败");
		}
		return BaseResultVo.responseSuccess("添加成功");
	}
	
	/**
	 * 根据ID获取物品入库
	 * @param id
	 * @return
	 */
	@RequestMapping("/getGoodsInStoreById.do")
	@ResponseBody
	@BussAnnotation(moduleName="礼品入库管理",option="根据ID获取入库单信息")
	public BaseResultVo getGoodsInStoreById(int id){
		if(id==0){
			return BaseResultVo.responseFail("参数异常");
		}
		GwGoodsInStoreModel goods = gwGoodsInStoreServiceImpl.selectById(id);
		if(goods==null){
			return BaseResultVo.responseFail("获取信息失败");
		}
		BaseResultVo baseResultVo = BaseResultVo.responseSuccess("获取信息成功");
		baseResultVo.setData(goods);
		return baseResultVo;
	}
	
	/**
	 * 修改物品入库信息
	 * @param goods
	 * @param request
	 * @return
	 */
	@RequestMapping("/updateGoodsInStore.do")
	@ResponseBody
	@BussAnnotation(moduleName="礼品入库管理",option="修改")
	public BaseResultVo updateGoodsInStore(int id,String code,String goodsInfoStore,HttpServletRequest request,String goodsInStoreDetail){
		if(goodsInfoStore==null || goodsInStoreDetail==null){
			return BaseResultVo.responseFail("参数异常");
		}
		GwGoodsInStoreModel goodsInfoStoreModel =  JsonMapper.buildNonDefaultMapper().fromJson(goodsInfoStore, GwGoodsInStoreModel.class);
		//修改时间
		goodsInfoStoreModel.setUpdateTime(DateUtil.getCurrentDatetime("-"));
		//修改人
		AdminUser adminUser=SecurityUtil.getAdminUser(request);
		goodsInfoStoreModel.setUpdateUserId(adminUser.getUserId());
		//状态(待确认)
		goodsInfoStoreModel.setStatus(0);
		goodsInfoStoreModel.setId(id);
		//把字符串转换为List对象
		List<GwGoodsInStoreDetailModel> goodsInStore =JsonMapper.buildNonDefaultMapper().fromJsonToList(goodsInStoreDetail, GwGoodsInStoreDetailModel.class);
		if(goodsInStore!=null && goodsInStore.size()>0){
			for(GwGoodsInStoreDetailModel goods : goodsInStore){
				if((goods.getStoreCode()==null)||("".equals(goods.getStoreCode()))){
					return BaseResultVo.responseFail("请选择仓库名称");
				}
				if((goods.getGoodsCode()==null)||("".equals(goods.getGoodsCode()))){
					return BaseResultVo.responseFail("请选择礼品名称");
				}
				if(goods.getNumber()==0){
					return BaseResultVo.responseFail("入库数量不能为0");
				}
				//物品入库信息
				goods.setId(goods.getId());
				goods.setGoodsCode(goods.getGoodsCode());
				goods.setGoodsInStoreCode(goods.getGoodsInStoreCode());
				goods.setNumber(goods.getNumber());
				goods.setPrice(goods.getPrice());
				goods.setStoreCode(goods.getStoreCode());
				goods.setTotalMoney(goods.getTotalMoney());
				//逐条修改物品入库清单
				int number = gwGoodsInStoreDetailServiceImpl.update(goods);
				if(number<0){
					return BaseResultVo.responseFail("修改物品入库清单信息失败");
				}
				if(goods.getId()==null){
					//添加该入库清单明细
					int insert = gwGoodsInStoreDetailServiceImpl.insert(goods);
					if(insert<0){
						return BaseResultVo.responseFail("添加物品入库清单失败");
					}
				}
			}
		}
		//修改数据
		int number = gwGoodsInStoreServiceImpl.update(goodsInfoStoreModel);
		
		if(number<0){
			return BaseResultVo.responseFail("修改失败");
		}
		return BaseResultVo.responseSuccess("修改成功");
	}
	
	/**
	 * 删除物品信息
	 * @param id
	 * @return
	 */
	@RequestMapping("/deleteGoodsInStoreById.do")
	@ResponseBody
	@BussAnnotation(moduleName="礼品入库管理",option="删除")
	public BaseResultVo deleteGoodsInStoreById(int id,String goodsInStoreCode,HttpServletRequest request){
		if(id==0){
			return BaseResultVo.responseFail("参数异常");
		}
		//用户对象
		AdminUser adminUser=SecurityUtil.getAdminUser(request);
		//修改时间
		int number = gwGoodsInStoreServiceImpl.deleteById(id);
		Map<String,Object> params = new HashMap<>();
		params.put("goodsInStoreCode", goodsInStoreCode);
		//根据物品入库单号删除物品入库明细信息
		int deleteDetail = gwGoodsInStoreDetailServiceImpl.deleteGoodsInStoreDetailByGoodsCode(params);
		if(number<0 || deleteDetail<0){
			return BaseResultVo.responseFail("删除失败");
		}
		return BaseResultVo.responseSuccess("删除成功");
	}
	
	/**
	 * 审核物品入库单
	 * @param id
	 * @param code
	 * @param request
	 * @return
	 */
	@RequestMapping("/coufirmGoodsInStore.do")
	@ResponseBody
	@BussAnnotation(moduleName="礼品入库管理",option="确认")
	public BaseResultVo coufirmGoodsInStore(int id,String code,HttpServletRequest request,String approveView){
		if(id==0){
			return BaseResultVo.responseFail("参数异常");
		}
		//新建一个对象用户修改他的状态
		GwGoodsInStoreModel goodsInStore = new GwGoodsInStoreModel();
		goodsInStore.setId(id);
		goodsInStore.setStatus(1);
		//审核时间
		goodsInStore.setApproveTime(DateUtil.getCurrentDatetime("-"));
		//审核人
		AdminUser adminUser=SecurityUtil.getAdminUser(request);
		goodsInStore.setApproveUserId(adminUser.getUserId());
		//审核意见
		goodsInStore.setApproveView(approveView);
		//修改信息
		int number = gwGoodsInStoreServiceImpl.update(goodsInStore);
		if(number<0){
			return BaseResultVo.responseFail("修改物品入库信息失败");
		}
		//新建一个物品与仓库管理对象
		GwStoreGoodsModel storeGoods = new GwStoreGoodsModel();
		//根据物品入库单号查询物品入库明细集合
		List<GwGoodsInStoreDetailModel> goodsInStoreDetailList = gwGoodsInStoreDetailServiceImpl.getListByGoodsCode(code);
		for(GwGoodsInStoreDetailModel goods : goodsInStoreDetailList){
			//物品与仓库关联表信息
			storeGoods.setGoodsCode(goods.getGoodsCode());
			storeGoods.setStoreCode(goods.getStoreCode());
			storeGoods.setNumber(goods.getNumber());
			Map<String,Object> map = new HashMap<>();
			map.put("goodsCode", goods.getGoodsCode());
			map.put("storeCode", goods.getStoreCode());
			//根据物品编号查询物品与仓库管理信息
			GwStoreGoodsModel storeGoodsModel = gwStoreGoodsServiceImpl.getStoreGoodsByGoodsCode(map);
			if(storeGoodsModel==null){
				//添加一条物品与仓库管理信息
				gwStoreGoodsServiceImpl.insert(storeGoods);
			}else{
				Map<String,Object> params = new HashMap<>();
				params.put("addnumber", storeGoods.getNumber());
				params.put("goodsCode", storeGoodsModel.getGoodsCode());
				params.put("storeCode", storeGoodsModel.getStoreCode());
				//修改这条物品与仓库管理信息的数量
				gwStoreGoodsServiceImpl.updateStoreGoodsNumber(params);
			}
		}
		return BaseResultVo.responseSuccess("确认成功");
	}	
	
	/**
	 * 驳回物品入库单
	 * @param id
	 * @param approveView  审核意见
	 * @param request
	 * @return
	 */
	@RequestMapping("/unConfirmGoodsInStore.do")
	@ResponseBody
	@BussAnnotation(moduleName="礼品入库管理",option="驳回")
	public BaseResultVo unConfirmGoodsInStore(int id,String approveView,HttpServletRequest request){
		if(id==0){
			return BaseResultVo.responseFail("参数异常");
		}
		//新建一个物品入库对象
		GwGoodsInStoreModel goodsInStore = new GwGoodsInStoreModel();
		goodsInStore.setId(id);
		//审核时间
		goodsInStore.setApproveTime(DateUtil.getCurrentDatetime("-"));
		//审核人
		AdminUser adminUser=SecurityUtil.getAdminUser(request);
		goodsInStore.setApproveUserId(adminUser.getUserId());
		//状态(审核未通过)
		goodsInStore.setStatus(2);
		//审核意见
		goodsInStore.setApproveView(approveView);
		//根据ID查询入库单信息
		GwGoodsInStoreModel goods = gwGoodsInStoreServiceImpl.selectById(id);
		int number = gwGoodsInStoreServiceImpl.update(goodsInStore);
		if(number<0){
			return BaseResultVo.responseFail("驳回失败");
		}
		return BaseResultVo.responseSuccess("驳回成功");
		
	}
}
