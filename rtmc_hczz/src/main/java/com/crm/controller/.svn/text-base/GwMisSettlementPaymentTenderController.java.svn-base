package com.crm.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.crm.common.BasePageResultVo;
import com.crm.common.BaseResultVo;
import com.crm.common.LigerPageDataVo;
import com.crm.common.ResponseCode;
import com.crm.common.SecurityUtil;
import com.crm.common.Status;
import com.crm.pojo.GwSettlementPaymentTenderModel;
import com.crm.service.GwSettlementPaymentTenderService;
import com.crm.util.DateUtil;
import com.crm.util.ValidateUtil;
/**
 * 
 * GwSettlementPaymentTenderController:结算付款方式访问控制层
 *
 * @author chengpengfei
 * @date  2016年4月13日
 * @version  jdk1.8
 *
 */
@Controller
@RequestMapping("/settlementPaymentTender")
public class GwMisSettlementPaymentTenderController {
	@Resource(name="gwSettlementPaymentTenderServiceManage")
	private GwSettlementPaymentTenderService gwSettlementPaymentTenderService;
	/**
	 * 
	 * getSettlementPaymentTender:获取结算付款方式集合（分页）
	 *
	 * @date 2016年4月13日
	 * @param page   当前页码数
	 * @param pagesize      每页显示记录数
	 * @param request
	 * @return
	 */
	@RequestMapping("/getSettlementPaymentTender.do")
	@ResponseBody
	public LigerPageDataVo getSettlementPaymentTender(int currentPage,int pageSize,HttpServletRequest request){
		//条件参数
		Map<String, Object> params=new HashMap<String, Object>();
		params.put("currentPage", currentPage);
		params.put("pageSize", pageSize);
		
		BasePageResultVo baseResultVo=gwSettlementPaymentTenderService.selectPageList(params);
		//liger ui 分页格式数据
		LigerPageDataVo data=new LigerPageDataVo();
		data.setRows(baseResultVo.getRows());
		data.setTotal(baseResultVo.getPageInfo().getTotalRecord());
		return data;
	}
	/**
	 * 
	 * addSettlementPaymentTender:添加结算付款方式数据
	 *
	 * @date 2016年3月9日
	 * @param GwSettlementPaymentTenderModel
	 * @return
	 */
	@RequestMapping("/addSettlementPaymentTender.do")
	@ResponseBody
	public BaseResultVo addSettlementPaymentTender(GwSettlementPaymentTenderModel gwSettlementPaymentTenderModel,HttpServletResponse response,HttpServletRequest request){
		
		if(!ValidateUtil.isAvailableAccountStr(gwSettlementPaymentTenderModel.getCode(), 2, 4)){
			return BaseResultVo.responseFail("结算付款方式编号为2-4位的字符且不能包含非法字符");
		}
		if(!ValidateUtil.isLengthRangeStr(gwSettlementPaymentTenderModel.getPaymentname(), 2, 10)){
			return BaseResultVo.responseFail("结算付款方式名称为2-10位的字符且不能包含非法字符");
		}
		List<GwSettlementPaymentTenderModel> settlementPaymentList = gwSettlementPaymentTenderService.getAllList();
		for(GwSettlementPaymentTenderModel settlementPayment :settlementPaymentList){
			if(settlementPayment.getCode().equals(gwSettlementPaymentTenderModel.getCode())){
				return BaseResultVo.responseFail("结算付款方式编号已存在");
			}
		}
		Integer userid = SecurityUtil.getAdminUser(request).getUserId();
		BaseResultVo baseResultVo=new BaseResultVo();
		Status status=new Status();
		status.setCode(ResponseCode.OPR_SUCCESS);//提示代码
		status.setMsg("操作成功");//提示信息
		status.setDebugMsg("");//bug信息
		status.setUrl("");//url
		baseResultVo.setStatus(status);
		//更新时间
		
		gwSettlementPaymentTenderModel.setState(1);
		gwSettlementPaymentTenderModel.setLastmodbyUserid(userid);
		gwSettlementPaymentTenderModel.setLasttime(DateUtil.getCurrentDate("-"));
		gwSettlementPaymentTenderService.insert(gwSettlementPaymentTenderModel);
		return baseResultVo;
	}
	/**
	 * 
	 * getSettlementPaymentTenderById:根据结算付款id，获取结算付款信息
	 *
	 * @date 2016年4月13日
	 * @param id
	 * @param request
	 * @return
	 */
	@RequestMapping("/getSettlementPaymentTenderById.do")
	@ResponseBody
	public BaseResultVo getSettlementPaymentTenderById(int id,HttpServletRequest request){
		BaseResultVo baseResultVo=new BaseResultVo();
		Status status=new Status();
		status.setCode(ResponseCode.OPR_SUCCESS);//提示代码
		status.setMsg("操作成功");//提示信息
		status.setDebugMsg("");//bug信息
		status.setUrl("");//url
		
		if(id==0){
			status.setCode(ResponseCode.OPR_FAIL);
			status.setMsg("数据异常");//提示信息
			baseResultVo.setStatus(status);
			return baseResultVo;
		}
		
		//获取费用代码信息
		GwSettlementPaymentTenderModel gwSettlementPaymentTenderModel=gwSettlementPaymentTenderService.selectById(id);
		baseResultVo.setData(gwSettlementPaymentTenderModel);
		baseResultVo.setStatus(status);
		return baseResultVo;
	}
	/**
	 * 
	 * updateSettlementPaymentTender:更新结算付款方式数据
	 *
	 * @date 2016年3月9日
	 * @param GwSettlementPaymentTenderModel       结算付款方式对象
	 * @return
	 */
	@RequestMapping("/updateSettlementPaymentTender.do")
	@ResponseBody
	public BaseResultVo updateSettlementPaymentTender(GwSettlementPaymentTenderModel gwSettlementPaymentTenderModel,HttpServletRequest request){
		BaseResultVo baseResultVo=new BaseResultVo();
		Status status=new Status();
		status.setCode(ResponseCode.OPR_SUCCESS);//提示代码
		status.setMsg("操作成功");//提示信息
		status.setDebugMsg("");//bug信息
		status.setUrl("");//url
		Integer userid = SecurityUtil.getAdminUser(request).getUserId();
		//验证主键是否为空
		if(gwSettlementPaymentTenderModel.getId()==0){
			status.setCode(ResponseCode.OPR_FAIL);
			status.setMsg("数据异常");
			baseResultVo.setStatus(status);
			return baseResultVo;
		}
		
		//更新时间
		gwSettlementPaymentTenderModel.setLasttime(DateUtil.getCurrentDatetime("-"));
		gwSettlementPaymentTenderModel.setLastmodbyUserid(userid);
		//更新费用代码数据
		gwSettlementPaymentTenderService.update(gwSettlementPaymentTenderModel);
		baseResultVo.setStatus(status);
		return baseResultVo;
	}
	/**
	 * 
	 * deleSettlementPaymentByFake:假删除结算收款方式信息
	 *
	 * @date 2016年4月13日
	 * @return
	 */
	@RequestMapping("/deleSettlementPaymentByFake.do")
	@ResponseBody
	public BaseResultVo deleSettlementPaymentByFake(int id){
		BaseResultVo baseResultVo=new BaseResultVo();
		Status status=new Status();
		status.setCode(ResponseCode.OPR_SUCCESS);//提示代码
		int state = 0;
		status.setMsg("删除成功");//提示信息
		status.setDebugMsg("");//bug信息
		status.setUrl("");//url
		
		//验证主键是否为空
		if(id==0){
			status.setCode(ResponseCode.OPR_FAIL);
			status.setMsg("数据异常");
			baseResultVo.setStatus(status);
			return baseResultVo;
		}
		Map<String, Object> params=new HashMap<String, Object>();
		params.put("id", id);
		params.put("state", state);
		//假删除结算收款方式信息
		int number = gwSettlementPaymentTenderService.deleSettlementPaymentByFake(params);
		if(number<0){
			status.setCode(ResponseCode.OPR_FAIL);
			status.setMsg("修改失败");//提示信息
		}
		baseResultVo.setStatus(status);
		return baseResultVo;
	}
	/**
	 * 
	 * getSettlementTenderByMallInfoId:根据购物中心ID获取结算付款方式集合
	 *
	 * @date 2016年4月15日
	 * @return
	 */
	@RequestMapping("/getSettlementTenderByMallInfoId.do")
	@ResponseBody
	public Object getSettlementTenderByMallInfoId(Integer mallInfoId){
		//获取所有付款方式集合
		Map<String,Object> params = new HashMap<>();
		params.put("mallInfoId", mallInfoId);
		List<GwSettlementPaymentTenderModel> settlementTenderList=gwSettlementPaymentTenderService.getSettlementPaymentTenderByMallInfoId(params);
		List<HashMap<String,Object>> list=new ArrayList<HashMap<String,Object>>();
		for (GwSettlementPaymentTenderModel settlementPayment : settlementTenderList) {
			HashMap<String,Object> map=new HashMap<String,Object>();
			map.put("id", settlementPayment.getId());
			map.put("text", settlementPayment.getPaymentname());
			list.add(map);
		}
		return list;
	}

	
	/**
	 * 
	 * getAllSettlementTender:获取结算付款方式集合
	 *
	 * @date 2016年4月15日
	 * @return
	 */
	@RequestMapping("/getAllSettlementTender.do")
	@ResponseBody
	public Object getAllSettlementTender(){
		List<GwSettlementPaymentTenderModel> settlementTenderList=gwSettlementPaymentTenderService.getAllList();
		List<HashMap<String,Object>> list=new ArrayList<HashMap<String,Object>>();
		for (GwSettlementPaymentTenderModel settlementPayment : settlementTenderList) {
			HashMap<String,Object> map=new HashMap<String,Object>();
			map.put("id", settlementPayment.getCode());
			map.put("text", settlementPayment.getPaymentname());
			list.add(map);
		}
		return list;
	}
	/**
	 * 
	 * getAllSettlementPaymentTender:获取所有付款方式list
	 * 
	 * @date 2016年6月20日
	 * @param request
	 * @return
	 */
	@RequestMapping("/getAllSettlementPaymentTender.do")
	@ResponseBody
	public List<GwSettlementPaymentTenderModel> getAllSettlementPaymentTender(HttpServletRequest request) {
		List<GwSettlementPaymentTenderModel> list = gwSettlementPaymentTenderService.getAllList();
		return list;
	}
}
