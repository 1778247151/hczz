package com.crm.controller;

import java.io.File;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.crm.common.AdminUser;
import com.crm.common.BasePageResultVo;
import com.crm.common.BaseResultVo;
import com.crm.common.ConstantUtils;
import com.crm.common.LigerPageDataVo;
import com.crm.common.QueryConditon;
import com.crm.common.SecurityUtil;
import com.crm.interceptor.BussAnnotation;
import com.crm.pojo.GwGoodsInStoreDetailModel;
import com.crm.pojo.GwLeaseGoodsModel;
import com.crm.pojo.GwPresentInfoModel;
import com.crm.pojo.GwStoreGoodsModel;
import com.crm.service.GwGoodsInStoreDetailService;
import com.crm.service.GwGoodsInStoreService;
import com.crm.service.GwLeaseGoodsService;
import com.crm.service.GwPresentInfoService;
import com.crm.service.GwStoreGoodsService;
import com.crm.util.BaseCodeUtil;
import com.crm.util.DateUtil;
import com.crm.util.QueryConditionUtil;

/**
 * 
 * GwPresentInfoController:礼品维护控制层
 *
 * @author chengpengfei
 * @date 2016年6月23日
 * @version jdk1.8
 *
 */
@Controller
@RequestMapping("/presentInfo")
public class GwPresentInfoController {

	/**
	 * 礼品维护业务逻辑
	 */
	@Resource(name="gwPresentInfoServiceManage")
	private GwPresentInfoService gwPresentInfoServiceImpl;
	
	/**
	 * 物品维护业务逻辑
	 */
	@Resource(name = "gwGoodsServiceManage")
	private GwLeaseGoodsService gwGoodsServiceImpl;
	/**
	 * 物品与仓库管理表业务逻辑
	 */
	@Resource(name="gwStoreGoodsServiceManage")
	private GwStoreGoodsService gwStoreGoodsServiceImpl;
	
	/**
	 * 物品入库明细逻辑
	 */
	@Resource(name="gwGoodsInStoreDetailServiceManage")
	private GwGoodsInStoreDetailService gwGoodsInStoreDetailServiceImpl;
	
	/**
	 * 物品入库业务逻辑层
	 */
	@Resource(name="gwGoodsInStoreServiceManage")
	private GwGoodsInStoreService gwGoodsInStoreServiceImpl;
	
	/**
	 * 获取礼品维护数据分页集合
	 * @author chengpengfei
	 * @param  currentPage
	 * @param  pageSize
	 * @return
	 */
	@RequestMapping("/getPresentInfoByPageList.do")
	@ResponseBody
	@BussAnnotation(moduleName="礼品维护",option="获取列表")
	public LigerPageDataVo getPresentInfoByPageList(int currentPage,int pageSize,String code,String name){
		//条件参数
		Map<String, Object> params=new HashMap<String, Object>();
		params.put("currentPage", currentPage);
		params.put("pageSize", pageSize);
		params.put("code", code);
		params.put("name", name);
		BasePageResultVo baseResultVo=gwPresentInfoServiceImpl.selectPageList(params);
		//liger ui 分页格式数据
		LigerPageDataVo data=new LigerPageDataVo();
		data.setRows(baseResultVo.getRows());
		data.setTotal(baseResultVo.getPageInfo().getTotalRecord());
		return data;
	}
	
	/**
	 * 
	 * 生成礼品维护的编号
	 *
	 * @date 206年3月5日
	 * @param id
	 * @param request
	 * @return
	 */
	public String getPresentInfoCode() {
		//获取当天时间
		String time = DateUtil.getCurrentDate("");
		String code = gwPresentInfoServiceImpl.getPresentByLastOne(time);
		return code;
	}
	
	/**
	 * 添加礼品
	 * @param present
	 * @param request
	 * @return
	 */
	@RequestMapping("/addPresentInfo.do")
	@ResponseBody
	@BussAnnotation(moduleName="礼品维护",option="添加")
	public BaseResultVo addPresentInfo(GwPresentInfoModel present,HttpServletRequest request){
		if(present==null){
			return BaseResultVo.responseFail("实体类为空");
		}
		if (present.getPictureImage() != null && (!present.getPictureImage().equals(""))) {
			// 文件根目录
			String bootPath = request.getSession().getServletContext().getRealPath("/");
			String pathName = present.getPictureImage();
			String fileName = pathName.substring(6);
			String newFliePath = bootPath + ConstantUtils.UPLOAD_IMAGE_PATH + "/" + fileName;
			// 当前时间字符串
			String time = new Date().getTime() + "";
			time = time.substring(time.length() - 5);
			// 判断是否有同名文件存在，如果存在则重命名，加上当前时间戳的后五位
			File file = new File(newFliePath);
			String newFileName = fileName;
			if (file.exists()) {
				String name1 = fileName.substring(0, fileName.lastIndexOf("."));
				String name2 = fileName.substring(fileName.lastIndexOf("."));
				newFileName = name1 + "_" + time + name2;
			}
			// 添加之前先删除文件并复制文件到新的目录
			boolean flag = gwGoodsServiceImpl.deleteAndCopyFile(fileName, newFileName, request);
			if (flag == false) {
				return BaseResultVo.responseFail("删除或复制文件出错");
			}

			String newPathFlie = "/" + ConstantUtils.UPLOAD_IMAGE_PATH + "/" + fileName;
			present.setPictureImage(newPathFlie);
		}
		//创建时间
		present.setCreateTime(DateUtil.getCurrentDatetime("-"));
		present.setUpdateTime(DateUtil.getCurrentDatetime("-"));
		//创建人
		AdminUser adminUser=SecurityUtil.getAdminUser(request);
		present.setCreateUserId(adminUser.getUserId());
		present.setUpdateUserId(adminUser.getUserId());
		//存入数据
		String code=getPresentInfoCode();
		present.setCode(code);
		int number = gwPresentInfoServiceImpl.insert(present);
		if(number<0){
			return BaseResultVo.responseFail("添加失败");
		}
		return BaseResultVo.responseSuccess("添加成功");
	}
	
	/**
	 * 根据ID获取礼品信息
	 * @param id
	 * @return
	 */
	@RequestMapping("/getPresentInfoById.do")
	@ResponseBody
	@BussAnnotation(moduleName="礼品维护",option="根据ID获取信息")
	public BaseResultVo getPresentInfoById(int id){
		if(id==0){
			return BaseResultVo.responseFail("参数异常");
		}
		GwPresentInfoModel present = gwPresentInfoServiceImpl.selectById(id);
		if(present==null){
			return BaseResultVo.responseFail("获取信息失败");
		}
		BaseResultVo baseResultVo = BaseResultVo.responseSuccess("获取信息成功");
		baseResultVo.setData(present);
		return baseResultVo;
	}
	
	/**
	 * 修改礼品信息
	 * @param goods
	 * @param request
	 * @return
	 */
	@RequestMapping("/updatePresentInfo.do")
	@ResponseBody
	@BussAnnotation(moduleName="礼品维护",option="修改")
	public BaseResultVo updatePresentInfo(GwPresentInfoModel present,HttpServletRequest request){
		if(present==null){
			return BaseResultVo.responseFail("实体类为空");
		}
		String pathImage = present.getPictureImage();
		// 截取图片路径的第二位字符
		String path = "";
		if (pathImage != null && !("".equals(pathImage))) {
			path = pathImage.substring(1, 2);

			// 判断是否更改了图片
			String isEditImage = ConstantUtils.UPLOAD_IMAGE_PATH.substring(0, 1);
			if (!(isEditImage.equals(path))) {
				// 文件根目录
				String bootPath = request.getSession().getServletContext().getRealPath("/");
				String pathName = present.getPictureImage();
				String fileName = pathName.substring(6);
				String newFliePath = bootPath + ConstantUtils.UPLOAD_IMAGE_PATH + "/" + fileName;
				// 当前时间字符串
				String time = new Date().getTime() + "";
				time = time.substring(time.length() - 5);
				// 判断是否有同名文件存在，如果存在则重命名，加上当前时间戳的后五位
				File file = new File(newFliePath);
				String newFileName = fileName;
				if (file.exists()) {
					String name1 = fileName.substring(0, fileName.lastIndexOf("."));
					String name2 = fileName.substring(fileName.lastIndexOf("."));
					newFileName = name1 + "_" + time + name2;
				}
				// 添加之前先删除文件并复制文件到新的目录
				boolean flag = gwGoodsServiceImpl.deleteAndCopyFile(fileName, newFileName, request);
				if (flag == false) {
					return BaseResultVo.responseFail("删除或复制文件出错");
				}

				String newPathFlie = "/" + ConstantUtils.UPLOAD_IMAGE_PATH + "/" + fileName;
				present.setPictureImage(newPathFlie);
			}
		}
		//修改时间
		present.setUpdateTime(DateUtil.getCurrentDatetime("-"));
		//修改人
		AdminUser adminUser=SecurityUtil.getAdminUser(request);
		present.setUpdateUserId(adminUser.getUserId());
		//修改数据
		int number = gwPresentInfoServiceImpl.update(present);
		if(number<0){
			return BaseResultVo.responseFail("修改失败");
		}
		return BaseResultVo.responseSuccess("修改成功");
	}
	
	/**
	 * 删除礼品信息
	 * @param id
	 * @return
	 */
	@RequestMapping("/deletePresentInfoById.do")
	@ResponseBody
	@BussAnnotation(moduleName="礼品维护",option="删除")
	public BaseResultVo deletePresentInfoById(int id,String goodsCode){
		if(id==0){
			return BaseResultVo.responseFail("参数异常");
		}
		//根据物品编号查询物品与仓库数据集合
		List<GwStoreGoodsModel> storeGoodsList = gwStoreGoodsServiceImpl.getStoreGoodsListByGoodsCode(goodsCode);
		if(storeGoodsList.size()>0){
			return BaseResultVo.responseFail("此礼品已入库不能删除");
		}
		List<GwGoodsInStoreDetailModel> goodsInStoreDetail = gwGoodsInStoreDetailServiceImpl.getGoodsInStoreCodeByPresentCode(goodsCode);
		if(goodsInStoreDetail.size()>0){
			return BaseResultVo.responseFail("此礼品已添加到入库单不能删除");
		}
		int number = gwPresentInfoServiceImpl.deleteById(id);
		if(number<0){
			return BaseResultVo.responseFail("删除失败");
		}
		return BaseResultVo.responseSuccess("删除成功");
	}
	
	/**
	 * 获取下拉列表所有分页List
	 * @param queryCondition 查询参数
	 * @return
	 */
	@RequestMapping("/getPresentInfoByComBoBoxList.do")
	@ResponseBody
	@BussAnnotation(moduleName="礼品维护",option="获取下拉列表")
	public LigerPageDataVo getPresentInfoByComBoBoxList(QueryConditon queryCondition,Integer type,String gift){
		//查询条件数组字符串（前端传递的字符串名称需和xml查询名称一致）
		String[] queryParamArr=new String[]{"name"};
		//获取分页参数信息map
		Map<String, Object> params=QueryConditionUtil.getParamsMap(queryParamArr, queryCondition);
		BasePageResultVo baseResultVo=gwPresentInfoServiceImpl.selectPageList(params);
		LigerPageDataVo data=new LigerPageDataVo();
		data.setRows(baseResultVo.getRows());
		data.setTotal(baseResultVo.getPageInfo().getTotalRecord());
		return data;
	}
}
