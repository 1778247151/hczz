package com.crm.controller;

import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.crm.common.BasePageResultVo;
import com.crm.common.BaseResultVo;
import com.crm.common.LigerPageDataVo;
import com.crm.common.ResponseCode;
import com.crm.common.StructureUtil;
import com.crm.enums.transsalestotalStateEnum;
import com.crm.interceptor.exception.BaseException;
import com.crm.pojo.GwGoodsInfoModel;
import com.crm.pojo.GwShopsLeaseModel;
import com.crm.pojo.GwTranssalestotalModel;
import com.crm.service.GwGoodsInfoService;
import com.crm.service.GwShopsLeaseService;
import com.crm.service.GwTranssalestotalService;
import com.crm.util.ExcelUtil;

@Controller
@RequestMapping("/gwTranssalestotalService")
public class GwTranssalestotalController extends BaseException {

	@Resource(name = "transsalestotalServiceManage")
	private GwTranssalestotalService gwTranssalestotalServiceImpl;
	
	/**
	 * 购物中心管理业务逻辑
	 */
	@Resource(name="gwShopsLeaseServiceManage")
	private GwShopsLeaseService gwShopsLeaseServiceImpl;
	
	/**
	 * 货物信息管理业务逻辑
	 */
	@Resource(name="gwGoodsInfoServiceManage")
	private GwGoodsInfoService gwGoodsInfoServiceImpl;

	/**
	 * 新增销售数据
	 */
	@RequestMapping("/addgwTranssalestotal.do")
	@ResponseBody
	public BasePageResultVo addgwTranssalestotal(GwTranssalestotalModel gts, HttpServletRequest request) {
		BasePageResultVo remes;
		gts.setGwState(3);
		//店铺编号
		String shopsLeaseCode = gts.getGwShopsLeaseCode();
		GwShopsLeaseModel shopslease = gwShopsLeaseServiceImpl.getShopsLeaseByCode(shopsLeaseCode);
		//货品编号
		String code  = gts.getGwGoodsInfoCode();
		GwGoodsInfoModel goodsinfo = gwGoodsInfoServiceImpl.getGoodsInfoByCode(code);
		if(shopslease==null || goodsinfo ==null){
			String [] status = {ResponseCode.OPR_FAIL,"数据不匹配","",""} ; 
			return remes =StructureUtil.returnObject(null,status);
		}
		//销售时间
		String time = gts.getGwTxdate();
		String showTime = time.substring(11);
		String txTime = time.substring(0, 10);
		gts.setGwTxtime(showTime);
		gts.setGwTxdate(txTime);	
		int flag = gwTranssalestotalServiceImpl.insert(gts);
		if (flag > 0) {
			String[] status = { ResponseCode.OPR_SUCCESS, "恭喜销售数据提交成功", "", StructureUtil.getUrl(request) };
			remes = StructureUtil.returnObject(null, status);
		} else {
			String[] status = { ResponseCode.OPR_FAIL, "销售数据提交失败", "", StructureUtil.getUrl(request) };
			remes = StructureUtil.returnObject(null, status);
		}
		return remes;

	}

	/**
	 * 
	 * getTranssalestotalList:根据结算单号查询结算明细数据
	 *
	 * @date 206年4月25日
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/getTranssalestotalList.do")
	public Object getTranssalestotalList(String startTime, String endTime, String merchantsInfoId, String gwShopsLeaseId,
			String goodstreeId, String date) {
		// 获取所有销售数据
		Map<String, Object> params = new HashMap<String, Object>();
		// 根据开始时间查询
		params.put("startTime", startTime);
		// 根据结束时间查询
		params.put("endTime", endTime);
		// 根据商户名称查询
		params.put("merchantsInfoId", merchantsInfoId);
		// 根据商铺名称
		params.put("gwShopsLeaseId", gwShopsLeaseId);
		// 根据货品类别查询
		params.put("goodstreeId", goodstreeId);
		params.put("date", date);
		List<GwTranssalestotalModel> transsaletotalList = gwTranssalestotalServiceImpl.getTranssalestotalList(params);
		return transsaletotalList;
	}

	/**
	 * 
	 * getTranssalestotalByPageList:获取销售数据集合（分页）
	 *
	 * @date 2016年4月25日
	 * @param page
	 *            当前页码数
	 * @param pagesize
	 *            每页显示记录数
	 * @param request
	 * @return
	 */
	@RequestMapping("/getTranssalestotalByPageList.do")
	@ResponseBody
	public LigerPageDataVo getTranssalestotalByPageList(int currentPage, int pageSize, HttpServletRequest request,
			String startTime, String endTime, String merchantsInfoId, String shopsInfoId, String goodstreeId) {
		// 条件参数
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("currentPage", currentPage);
		params.put("pageSize", pageSize);
		// 根据开始时间查询
		params.put("startTime", startTime);
		// 根据结束时间查询
		params.put("endTime", endTime);
		// 根据商户名称查询
		params.put("merchantsInfoId", merchantsInfoId);
		// 根据商铺名称
		params.put("shopsInfoId", shopsInfoId);
		// 根据货品类别查询
		params.put("goodstreeId", goodstreeId);
		params.put("status", 1);
		BasePageResultVo baseResultVo = gwTranssalestotalServiceImpl.selectPageList(params);
		// liger ui 分页格式数据
		LigerPageDataVo data = new LigerPageDataVo();
		data.setRows(baseResultVo.getRows());
		data.setTotal(baseResultVo.getPageInfo().getTotalRecord());
		return data;
	}

	/**
	 * 
	 * getTranssalestotalListByDay:查询日销售数据统计
	 *
	 * @date 206年4月25日
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/getTranssalestotalListByDay.do")
	public Object getTranssalestotalListByDay(String startTime, String endTime,String goodstreeId) {
		// 获取所有销售数据
		Map<String, Object> params = new HashMap<String, Object>();
		// 根据开始时间查询
		params.put("startTime", startTime);
		// 根据结束时间查询
		params.put("endTime", endTime);
		// 根据货品类别查询查询
		params.put("goodstreeId", goodstreeId);
		List<GwTranssalestotalModel> transsaletotalList = gwTranssalestotalServiceImpl.getTranssalestotalListByDay(params);
		return transsaletotalList;
	}

	/**
	 * 
	 * getTranssalestotalListByMonth:查询月销售数据统计
	 *
	 * @date 206年4月26日
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/getTranssalestotalListByMonth.do")
	public Object getTranssalestotalListByMonth(String startTime, String endTime,String goodstreeId) {
		// 获取所有销售数据
		Map<String, Object> params = new HashMap<String, Object>();
		// 根据开始时间查询
		params.put("startTime", startTime);
		// 根据结束时间查询
		params.put("endTime", endTime);
		// 根据货品类别查询查询
		params.put("goodstreeId", goodstreeId);
		List<GwTranssalestotalModel> transsaletotalList = gwTranssalestotalServiceImpl.getTranssalestotalListByMonth(params);
		return transsaletotalList;
	}

	/**
	 * 根据时间统计销售额
	 * 
	 * @param startTime
	 * @param endTime
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/getTranssalestotalByCount")
	public Object getTranssalestotalByCount(String startTime, String endTime) {
		Map<String, Object> params = new HashMap<>();
		params.put("startTime", startTime);
		params.put("endTime", endTime);
		List<GwTranssalestotalModel> transsaleByCount = gwTranssalestotalServiceImpl.getTranssalestotalByCount(params);
		return transsaleByCount;

	}

	/**
	 * 统计最近10的销售额
	 * 
	 * @return
	 * @throws ParseException
	 */
	@ResponseBody
	@RequestMapping("/getTranssalestotalByTenDay")
	public Object getTranssalestotalByTenDay() throws ParseException {
		LigerPageDataVo LigerPageDataVo = new LigerPageDataVo();
		List<Map<String, Object>> list = new ArrayList<>();
		
		Calendar calendar = new GregorianCalendar();
		
		// 获取所有的
		List<GwTranssalestotalModel> getAllList = gwTranssalestotalServiceImpl.getListGroupByGoodsId();
		for (GwTranssalestotalModel transs : getAllList) {
			int k=0;
			for (int i = 0; i < 10; i++) {
				Map<String, Object> map = new HashMap<>();
				if(k==0){
				calendar.add(Calendar.DAY_OF_MONTH, -9);
				}else{
				calendar.add(calendar.DAY_OF_MONTH, 1);	
				}
				SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
				String newdate = format.format(calendar.getTime());

			    k++;
				// 货品类型
				String goodName = transs.getGoodName();
				// 获取统计10天的销售额集合
				List<GwTranssalestotalModel> transsaleByCount = gwTranssalestotalServiceImpl.getTranssalestotalByTenDay();								
				for (GwTranssalestotalModel transsale : transsaleByCount) {
				    String date = transsale.getGwTxdate();
						if (newdate.equals(date)&&goodName.equals(transsale.getGoodName())) {
							map.put("reldate", date);
							map.put("value", transsale.getCountTenDayMount());
							map.put("name", goodName);
							break;							
						} else {
							map.put("reldate", newdate);
							map.put("value", new BigDecimal(0));
							map.put("name", goodName);							
						}								
					}
				list.add(map);
				
				}
		}
		return list;
	}
	/**
	 * 销售补录导出
	 * ExportDataTranssales:
	 *
	 * @author hemingjun
	 * @date 2016年8月3日
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception 
	 */
	@RequestMapping("/exportDataTranssales.do")
	@ResponseBody
	public BaseResultVo ExportDataTranssales (HttpServletRequest request,HttpServletResponse response) throws Exception{
		Map<String, Object> params = new HashMap<String, Object>();
		System.err.println("test1111111");
		params.put("status", transsalestotalStateEnum.type_ENA.getValue());
		List<GwTranssalestotalModel> transsalestotalList=gwTranssalestotalServiceImpl.getTransalesListByConditionExport(params);
		List<GwTranssalestotalModel> GwTranssalestotalModelNew=new ArrayList<>();
		String sheetName="销售补录";
		for (GwTranssalestotalModel gwTranssalestotalModel : transsalestotalList) {
			gwTranssalestotalModel.setStateName(transsalestotalStateEnum.getDisplayName(gwTranssalestotalModel.getGwState()));
			GwTranssalestotalModelNew.add(gwTranssalestotalModel);
		}
		String[] headerAtrr={"商户名称","店铺名称","店铺面积","业态名称","支付方式","状态","合同号","收银机编号","交易日期","交易时间","交易流水号","货品大类","货品小类",
				"销售总数量","销售总额"};
		String[] columnArr={"merchansInfoName","shopsLeaseName","shopArea","formatsName","paymentTenderName","stateName","gwContractAContractcode","gwTillid","gwTxdate",
				"gwTxtime","gwTxserial","goodName","goodsName","gwSalesnumber","gwSalesamount"};
		int[] colWidthArr={20,20,20,20,20,20,20,20,20,20,20,20,20,20,20};
		boolean number= ExcelUtil.exportExcel(sheetName, transsalestotalList, columnArr, headerAtrr, colWidthArr, request, response);
		if(number==false){
			return BaseResultVo.responseFail("导出失败");
		}
		return BaseResultVo.responseSuccess("导出成功");
	}
	
	
 
}
