package com.crm.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.crm.common.BasePageResultVo;
import com.crm.common.BaseResultVo;
import com.crm.common.LigerPageDataVo;
import com.crm.common.QueryConditon;
import com.crm.interceptor.BussAnnotation;
import com.crm.pojo.GwIntegralExchangeGoodsModel;
import com.crm.pojo.GwStoreGoodsModel;
import com.crm.service.GwIntegralExchangeGoodsService;
import com.crm.service.GwStoreGoodsService;
import com.crm.util.QueryConditionUtil;

/**
 * 
 * GwStoreGoodsController:物品与仓库管理控制层
 *
 * @author chengpengfei
 * @date 2016年6月23日
 * @version jdk1.8
 *
 */
@Controller
@RequestMapping("/storeGoods")
public class GwStoreGoodsController {

	/**
	 * 物品与仓库管理表业务逻辑
	 */
	@Resource(name="gwStoreGoodsServiceManage")
	private GwStoreGoodsService gwStoreGoodsServiceImpl;
	/**
	 * 礼物兑换业务逻辑
	 */
	@Resource(name = "gwIntegralExchangeGoodsServiceManage")
	private GwIntegralExchangeGoodsService gwIntegralExchangeGoodsServiceImpl;
	/**
	 * 根据仓库编号获取下拉列表物品分页LIST
	 * @param queryCondition 查询参数
	 * @return
	 */
	@RequestMapping("/getStoreGoodsByStoreCode.do")
	@ResponseBody
	@BussAnnotation(moduleName="礼品与仓库统计",option="获取下拉列表")
	public LigerPageDataVo getStoreGoodsByStoreCode(QueryConditon queryCondition,String storeCode,String type,String relType){
		//查询条件数组字符串（前端传递的字符串名称需和xml查询名称一致）
		String[] queryParamArr=new String[]{"name"};
		
		LigerPageDataVo data=new LigerPageDataVo();
		
		if(storeCode==null || storeCode .trim().length()==0) {
			return data;
		}
		//获取分页参数信息map
		Map<String, Object> params=QueryConditionUtil.getParamsMap(queryParamArr, queryCondition);
		params.put("storeCode", storeCode);
		params.put("type", type);
		params.put("relType", relType);
		BasePageResultVo baseResultVo=gwStoreGoodsServiceImpl.selectPageList(params);
		
		data.setRows(baseResultVo.getRows());
		data.setTotal(baseResultVo.getPageInfo().getTotalRecord());
		return data;
	}
	
	/**
	 * 
	 * getStoreGoodsCombox:获取仓库礼品数量通过礼品编号分组
	 *
	 * @author hemingjun
	 * @date 2016年11月11日
	 * @return
	 */
	@RequestMapping("/getStoreGoodsCombox.do")
	@ResponseBody
	@BussAnnotation(moduleName="礼品与仓库统计",option="获取下拉列表")
	public LigerPageDataVo getStoreGoodsCombox(QueryConditon queryCondition,String storeCode,String type,String relType){
		//查询条件数组字符串（前端传递的字符串名称需和xml查询名称一致）
		String[] queryParamArr=new String[]{"name"};
		
		LigerPageDataVo data=new LigerPageDataVo();

		//获取分页参数信息map
		Map<String, Object> params=QueryConditionUtil.getParamsMap(queryParamArr, queryCondition);
		params.put("storeCode", storeCode);
		params.put("type", type);
		params.put("relType", relType);
		BasePageResultVo baseResultVo=gwStoreGoodsServiceImpl.getStoreGoodsCombox(params);
		
		data.setRows(baseResultVo.getRows());
		data.setTotal(baseResultVo.getPageInfo().getTotalRecord());
		return data;
	}
	/**
	 * 获取仓库与物品关系统计分页集合
	 * @author chengpengfei
	 * @param  currentPage
	 * @param  pageSize
	 * @return
	 */
	@RequestMapping("/getStoreGoodsCountByPageList.do")
	@ResponseBody
	@BussAnnotation(moduleName="礼品与仓库统计",option="获取列表")
	public LigerPageDataVo getStoreGoodsCountByPageList(int currentPage,int pageSize,String storeCode,String goodsCode){
		//条件参数
		Map<String, Object> params=new HashMap<String, Object>();
		params.put("currentPage", currentPage);
		params.put("pageSize", pageSize);
		params.put("storeCode", storeCode);
		params.put("goodsCode", goodsCode);
		BasePageResultVo baseResultVo=gwStoreGoodsServiceImpl.getStoreGoodsByCount(params);
		//liger ui 分页格式数据
		LigerPageDataVo data=new LigerPageDataVo();
		data.setRows(baseResultVo.getRows());
		data.setTotal(baseResultVo.getPageInfo().getTotalRecord());
		return data;
	}
	
	/**
	 * 根据物品编号获取物品总数量
	 * @param goodsCode
	 * @return
	 */
	@RequestMapping("/getStoreGoodsTotalNumberByGoodsCode.do")
	@ResponseBody
	public BaseResultVo getStoreGoodsTotalNumberByGoodsCode(String goodsCode){
		if(goodsCode==null){
			return BaseResultVo.responseFail("参数异常");
		}
		List<GwStoreGoodsModel> storeGoodsList = gwStoreGoodsServiceImpl.getStoreGoodsListByGoodsCode(goodsCode);
		int number = 0;
		for(GwStoreGoodsModel store : storeGoodsList){
			number+=store.getNumber();
		}
		
		
		GwIntegralExchangeGoodsModel integralExchangeGoods = gwIntegralExchangeGoodsServiceImpl.selectExchangeNumberByGroupGoodsCode(goodsCode);
		if(integralExchangeGoods!=null){
			int exchangeNum = integralExchangeGoods.getExchageMemberNum();
			number-=exchangeNum;
		}
		
		GwStoreGoodsModel storeGoods = new GwStoreGoodsModel();
		storeGoods.setNumber(number);
		BaseResultVo baseResultVo = BaseResultVo.responseSuccess("获取信息成功");
		baseResultVo.setData(storeGoods);
		return baseResultVo;
	}
}
