package com.crm.controller;

import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.crm.common.AdminUser;
import com.crm.common.BasePageResultVo;
import com.crm.common.BaseResultVo;
import com.crm.common.LigerPageDataVo;
import com.crm.common.ResponseCode;
import com.crm.common.SecurityUtil;
import com.crm.common.Status;
import com.crm.interceptor.exception.BaseException;
import com.crm.pojo.GwAddressBookModel;
import com.crm.service.GwAddressBookService;
import com.crm.util.DateUtil;

/**
 * 
 * GwAddressBookController:通讯录控制层
 *
 * @author hanzhiqiang
 * @date 2016年11月8日
 * @version jdk.8
 *
 */
@Controller
@RequestMapping("/addressBook")
public class GwAddressBookController  extends BaseException {
	// 日志
		private Logger logger = LoggerFactory.getLogger(GwAddressBookController.class);
	/**
	 * 通讯录管理业务逻辑
	 */
	@Resource(name = "gwAddressBookServiceManage")
	private GwAddressBookService gwAddressBookServiceImpl;
		
		/**
		 *
		 * getAddressBookList:获取通讯录信息列表（分页）
		 *
		 * @author   hanzhiqiang
		 * @date     2016年11月8日
		 *
		 * @param currentPage  
		 * 					当前页
		 * @param pageSize  
		 * 				每页记录数
		 * @return
		 */
		@RequestMapping("/getAddressBookList.do")
		@ResponseBody
		public LigerPageDataVo getAddressBookList(String name,String departmentCode,Integer phone,int currentPage, int pageSize, HttpServletRequest request) {
			// 条件参数
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("currentPage", currentPage);
			params.put("pageSize", pageSize);
			params.put("name", name);
			params.put("phone", phone);
			params.put("departmentCode", departmentCode);
			
			BasePageResultVo baseResultVo = gwAddressBookServiceImpl.selectPageList(params);
			// liger ui 分页格式数据
			LigerPageDataVo data = new LigerPageDataVo();
			data.setRows(baseResultVo.getRows());
			data.setTotal(baseResultVo.getPageInfo().getTotalRecord());
			return data;
		}
		
		/**
		 *
		 * addAddressBook:添加
		 *
		 * @author   hanzhiqiang
		 * @date     2016年11月8日
		 *
		 * @param currentPage  
		 * 					当前页
		 * @param pageSize  
		 * 				每页记录数
		 * @return
		 */
		@RequestMapping("/addAddressBook.do")
		@ResponseBody
		public BaseResultVo addAddressBook(GwAddressBookModel gwAddressBookModel,HttpServletRequest request) {
			
			BaseResultVo baseResultVo = new BaseResultVo();
			Status status = new Status();
			status.setCode(ResponseCode.OPR_SUCCESS);// 提示代码
			status.setMsg("操作成功");// 提示信息
			status.setDebugMsg("");// bug信息
			status.setUrl("");// url
			baseResultVo.setStatus(status);
			//获取创建人信息
			AdminUser adminUser=SecurityUtil.getAdminUser(request);
			String username = adminUser.getUsername();

			//创建人
			gwAddressBookModel.setCreateUserId(adminUser.getUserId());
			//创建时间
			gwAddressBookModel.setCreateTime(DateUtil.getCurrentDatetime("-"));
			//状态
			//gwDepartmentModel.setStatus(1);
			//插入一条记录
			gwAddressBookServiceImpl.insert(gwAddressBookModel);
			logger.info(username+"新增了一条Id为"+gwAddressBookModel.getId()+"的记录");
			return baseResultVo;
		}
		/**
		 * 
		 * getAddressBookById:根据id，获取信息
		 *
		 * @author   hanzhiqiang
		 * @date     2016年11月9日
		 * @param id
		 * @param request
		 * @return
		 */
		@RequestMapping("/getAddressBookById.do")
		@ResponseBody
		public BaseResultVo getAddressBookById(int id, HttpServletRequest request) {
			//获取信息
			GwAddressBookModel addressBook=gwAddressBookServiceImpl.selectById(id);
			if(addressBook==null){
				return BaseResultVo.responseFail("获取通讯录信息失败");
			}
			BaseResultVo baseResultVo=BaseResultVo.responseSuccess("获取通讯录信息成功");
			baseResultVo.setData(addressBook);
			return baseResultVo;
		}
		/**
		 * 
		 * deleteAddressBookById:根据id，删除信息
		 *
		 * @author   hanzhiqiang
		 * @date     2016年11月8日
		 *
		 * @param id
		 * @param request
		 * @return
		 */
		@RequestMapping("/deleteAddressBookById.do")
		@ResponseBody
		public BaseResultVo deleteAddressBookById(String date,int id, HttpServletRequest request) {
			
			BaseResultVo baseResultVo = new BaseResultVo();
			Status status = new Status();
			status.setCode(ResponseCode.OPR_SUCCESS);// 提示代码
			status.setMsg("操作成功");// 提示信息
			status.setDebugMsg("");// bug信息
			status.setUrl("");// url
			String username = SecurityUtil.getAdminUser(request).getUsername();
			if (id == 0 || date!=null) {
				status.setCode(ResponseCode.OPR_FAIL);
				status.setMsg("数据异常");// 提示信息
				baseResultVo.setStatus(status);
				return baseResultVo;
			}
			int result=	gwAddressBookServiceImpl.deleteAddressBookById(id);
			if(result<0) System.out.print("删除失败");
			logger.info(username+"删除了Id为"+id+"的通讯录信息");
			baseResultVo.setStatus(status);
			return baseResultVo;
		}
		
		/**
		 * 
		 * updateAddressBook:更新信息
		 *
		 * @author   hanzhiqiang
		 * @date     2016年11月9日
		 *
		 * @return
		 */
		@RequestMapping("/updateAddressBook.do")
		@ResponseBody
		public BaseResultVo updateAddressBook(GwAddressBookModel gwAddressBookModel,HttpServletRequest request) {
			BaseResultVo baseResultVo = new BaseResultVo();
			Status status = new Status();
			status.setCode(ResponseCode.OPR_SUCCESS);// 提示代码
			status.setMsg("操作成功");// 提示信息
			status.setDebugMsg("");// bug信息
			status.setUrl("");// url
			if (gwAddressBookModel.getId() == 0) {
				status.setCode(ResponseCode.OPR_FAIL);
				status.setMsg("数据异常");// 提示信息
				baseResultVo.setStatus(status);
				return baseResultVo;
			}
			
			//得到修改人信息
			AdminUser adminUser=SecurityUtil.getAdminUser(request);
			String username = adminUser.getUsername();

			//修改人
			gwAddressBookModel.setUpdateUserId(adminUser.getUserId());
			//更新时间
			gwAddressBookModel.setUpdateTime(DateUtil.getCurrentDatetime("-"));
			//更新部门信息
			gwAddressBookServiceImpl.update(gwAddressBookModel);
			logger.info(username+"更新了Id为"+gwAddressBookModel.getId()+"的通讯录信息");
			baseResultVo.setStatus(status);
			return baseResultVo;
		}
}
