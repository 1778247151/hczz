package com.crm.controller;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.crm.common.BasePageResultVo;
import com.crm.common.BaseResultVo;
import com.crm.common.LigerPageDataVo;
import com.crm.common.ResponseCode;
import com.crm.common.SecurityUtil;
import com.crm.common.Status;
import com.crm.interceptor.BussAnnotation;
import com.crm.interceptor.exception.BaseException;
import com.crm.pojo.GwPromotionIntegralModel;
import com.crm.pojo.GwRepeatVisitModel;
import com.crm.service.GwPromotionIntegralScopeService;
import com.crm.service.GwPromotionIntegralService;
import com.crm.util.BaseCodeUtil;
import com.crm.util.DateUtil;


/**
 * 
 * GwPromotionIntegralController:促销积分规则访问控制层
 *
 * @author xiangtao
 * @date 2016年6月20日
 * @version jdk.8
 *
 */
@Controller
@RequestMapping("/promotionIntegral")
public class GwPromotionIntegralController extends BaseException {

	// 日志
	private Logger logger = LoggerFactory.getLogger(GwPromotionIntegralController.class);

	/**
	 * 促销积分规则业务逻辑
	 */
	@Resource(name = "gwPromotionIntegralServiceManage")
	private GwPromotionIntegralService gwPromotionIntegralServiceImpl;
	
	@Resource(name = "gwPromotionIntegralScopeServiceManage")
	private GwPromotionIntegralScopeService gwPromotionIntegralScopeServiceImpl;
	
	
	public String generateCode() {
		// 获取编号前缀
		String frontCode = BaseCodeUtil.getBaseCode("CX");
		// 获取当天时间
		String time = DateUtil.getCurrentDate("");
		String code = "";
		// 根据当天时间查询最后一条记录
		GwPromotionIntegralModel gwPromotionIntegralModel = gwPromotionIntegralServiceImpl.getPromotionIntegralByLastOne(time);
		if (gwPromotionIntegralModel == null) {
			code = frontCode + "0001";
		} else {
			String subString = gwPromotionIntegralModel.getCode().substring(2);
			long num = Long.parseLong(subString) + 1;
			code = "CX" + String.valueOf(num);
		}
		return code;
	}
	
	/**
	 * 
	 * getPromotionIntegralById:根据促销积分规则id，获取促销积分规则信息
	 *
	 * @date 206年3月5日
	 * @param id
	 * @param request
	 * @return
	 */
	@RequestMapping("/getPromotionIntegralById.do")
	@ResponseBody
	@BussAnnotation(moduleName="促销积分维护",option="获取促销积分通过ID")
	public BaseResultVo getPromotionIntegralById(int id, HttpServletRequest request) {
		BaseResultVo baseResultVo = new BaseResultVo();
		Status status = new Status();
		status.setCode(ResponseCode.OPR_SUCCESS);// 提示代码
		status.setMsg("操作成功");// 提示信息
		status.setDebugMsg("");// bug信息
		status.setUrl("");// url

		if (id == 0) {
			status.setCode(ResponseCode.OPR_FAIL);
			status.setMsg("数据异常");// 提示信息
			baseResultVo.setStatus(status);
			return baseResultVo;
		}

		// 获取促销积分规则信息
		GwPromotionIntegralModel gwPromotionIntegralModel = gwPromotionIntegralServiceImpl.selectById(id);
		baseResultVo.setData(gwPromotionIntegralModel);
		baseResultVo.setStatus(status);
		return baseResultVo;
	}
	
	/**
	 * addPromotionIntegral 添加促销积分规则
	 * 
	 * @date 2016年6月20日
	 * @param
	 * @return
	 */
	@RequestMapping("/addPromotionIntegral.do")
	@ResponseBody
	@BussAnnotation(moduleName="促销积分维护",option="添加")
	public BaseResultVo addPromotionIntegral(GwPromotionIntegralModel gwPromotionIntegralModel,HttpServletRequest request){
		
		//组装数据
		boolean isForever = gwPromotionIntegralModel.isCisForever();
		if(isForever){
			gwPromotionIntegralModel.setIsForever(1);
		}else{
			//判断开始日期和结束日期
			String startTime = gwPromotionIntegralModel.getStartTime();
			String endTime = gwPromotionIntegralModel.getEndTime();
			try {
				if(new SimpleDateFormat("yyyy-MM-dd").parse(startTime).getTime()-new SimpleDateFormat("yyyy-MM-dd").parse(endTime).getTime()>0){
					return BaseResultVo.responseFail("开始日期不能大于结束日期");
				}
			} catch (ParseException e) {
				return BaseResultVo.responseFail("请选择结束日期");
			}
			
			gwPromotionIntegralModel.setIsForever(0);
		}
		
		StringBuffer conditionGroup = new StringBuffer();
		
		if(gwPromotionIntegralModel.isCmemberGrade()){
			conditionGroup.append("01,");
		}
		if(gwPromotionIntegralModel.isCcardCode()){
			conditionGroup.append("02,");
		}
		if(gwPromotionIntegralModel.isCsex()){
			conditionGroup.append("03,");
		}
		if(gwPromotionIntegralModel.iscCurrentDay()){
			conditionGroup.append("04,");
		}
		if(gwPromotionIntegralModel.iscCurrentMonth()){
			conditionGroup.append("05,");
		}
		if(gwPromotionIntegralModel.iscWeek()){
			conditionGroup.append("06,");
		}
		if(gwPromotionIntegralModel.iscMonth()){
			conditionGroup.append("07,");
		}
		if(conditionGroup.length()!=0)
			gwPromotionIntegralModel.setConditionGroup(conditionGroup.toString().substring(0,conditionGroup.length()-1));
		
		Integer userid = SecurityUtil.getAdminUser(request).getUserId();
		gwPromotionIntegralModel.setCreateUserId(userid);
		gwPromotionIntegralModel.setCreateTime(DateUtil.getCurrentDatetime("-"));
		gwPromotionIntegralModel.setUpdateUserId(userid);
		gwPromotionIntegralModel.setUpdateTime(DateUtil.getCurrentDatetime("-"));
		
		String oldCode=gwPromotionIntegralModel.getCode();
		String code=generateCode();
		gwPromotionIntegralModel.setCode(code);

		Map<String, Object> params=new HashMap<>();
		params.put("code", code);
		params.put("oldCode", oldCode);
		gwPromotionIntegralScopeServiceImpl.updateByCode(params);
		
		gwPromotionIntegralServiceImpl.insert(gwPromotionIntegralModel);
		
		//查出对象ID回显给页面
		GwPromotionIntegralModel gim = gwPromotionIntegralServiceImpl.selectByCode(gwPromotionIntegralModel.getCode());
		
		BaseResultVo baseResultVo = new BaseResultVo();
		
		Status status = new Status();
		status.setCode(ResponseCode.OPR_SUCCESS);// 提示代码
		status.setMsg("操作成功");// 提示信息
		status.setDebugMsg("");// bug信息
		status.setUrl("");// url
		baseResultVo.setData(gim);
		baseResultVo.setStatus(status);
		return baseResultVo;
	}
	
	/**
	 * 
	 * delPromotionIntegralById:根据促销积分规则id，删除促销积分规则
	 *
	 * @date 2016年6月20日
	 * @param id
	 *            促销积分规则id
	 * @param request
	 * @return
	 */
	@RequestMapping("/delPromotionIntegral.do")
	@ResponseBody
	@BussAnnotation(moduleName="促销积分维护",option="删除")
	public BaseResultVo delPromotionIntegralById(int id, HttpServletRequest request) {
		BaseResultVo baseResultVo = new BaseResultVo();
		Status status = new Status();
		status.setCode(ResponseCode.OPR_SUCCESS);// 提示代码
		status.setMsg("操作成功");// 提示信息
		status.setDebugMsg("");// bug信息
		status.setUrl("");// url

		if (id == 0) {
			status.setCode(ResponseCode.OPR_FAIL);
			status.setMsg("数据异常");// 提示信息
			baseResultVo.setStatus(status);
			return baseResultVo;
		}
		
		gwPromotionIntegralScopeServiceImpl.deleteByCode(gwPromotionIntegralServiceImpl.selectById(id).getCode());
		
		int num = gwPromotionIntegralServiceImpl.deleteById(id);
		

		if (num < 0) {
			status.setCode(ResponseCode.OPR_FAIL);
			status.setMsg("操作失败");// 提示信息
		}
		baseResultVo.setStatus(status);
		return baseResultVo;
	}
	
	/**
	 * 
	 * updatePromotionIntegral:更新促销积分规则
	 *
	 * @date 2016年6月20日
	 * @param gwPromotionIntegralModel
	 *            促销积分规则信息对象
	 * @return
	 */
	@RequestMapping("/updatePromotionIntegral.do")
	@ResponseBody
	@BussAnnotation(moduleName="促销积分维护",option="修改")
	public BaseResultVo updatePromotionIntegral(GwPromotionIntegralModel gwPromotionIntegralModel,HttpServletRequest request) {
		//组装数据
		boolean isForever = gwPromotionIntegralModel.isCisForever();
		if(isForever){
			gwPromotionIntegralModel.setIsForever(1);
		}else{
			//判断开始日期和结束日期
			String startTime = gwPromotionIntegralModel.getStartTime();
			String endTime = gwPromotionIntegralModel.getEndTime();
			try {
				if(new SimpleDateFormat("yyyy-MM-dd").parse(startTime).getTime()-new SimpleDateFormat("yyyy-MM-dd").parse(endTime).getTime()>0){
					return BaseResultVo.responseFail("开始日期不能大于结束日期");
				}
			} catch (ParseException e) {
				return BaseResultVo.responseFail("请选择结束日期");
			}		
			gwPromotionIntegralModel.setIsForever(0);
		}
		
		StringBuffer conditionGroup = new StringBuffer();
		
		if(gwPromotionIntegralModel.isCmemberGrade()){
			conditionGroup.append("01,");
		}
		if(gwPromotionIntegralModel.isCcardCode()){
			conditionGroup.append("02,");
		}
		if(gwPromotionIntegralModel.isCsex()){
			conditionGroup.append("03,");
		}
		if(gwPromotionIntegralModel.iscCurrentDay()){
			conditionGroup.append("04,");
		}
		if(gwPromotionIntegralModel.iscCurrentMonth()){
			conditionGroup.append("05,");
		}
		if(gwPromotionIntegralModel.iscWeek()){
			conditionGroup.append("06,");
		}
		if(gwPromotionIntegralModel.iscMonth()){
			conditionGroup.append("07,");
		}
		if(conditionGroup.length()!=0)
			gwPromotionIntegralModel.setConditionGroup(conditionGroup.toString().substring(0,conditionGroup.length()-1));
		
		
		BaseResultVo baseResultVo = new BaseResultVo();
		Status status = new Status();
		status.setCode(ResponseCode.OPR_SUCCESS);// 提示代码
		status.setMsg("操作成功");// 提示信息
		status.setDebugMsg("");// bug信息
		status.setUrl("");// url

		// 验证主键是否为空
		if (gwPromotionIntegralModel.getId() == 0) {
			status.setCode(ResponseCode.OPR_FAIL);
			status.setMsg("数据异常");
			baseResultVo.setStatus(status);
			return baseResultVo;
		}

		// 更新时间
		gwPromotionIntegralModel.setUpdateTime(DateUtil.getCurrentDatetime("-"));
		int userid = SecurityUtil.getAdminUser(request).getUserId();
		gwPromotionIntegralModel.setUpdateUserId(userid);

		// 更新促销积分规则信息
		gwPromotionIntegralServiceImpl.update(gwPromotionIntegralModel);
		baseResultVo.setStatus(status);
		return baseResultVo;
	}

	/**
	 * 
	 * getPromotionIntegralList:获取促销积分规则集合（分页）
	 *
	 * @date 2016年6月20日
	 * @param page
	 *            当前页码数
	 * @param pagesize
	 *            每页显示记录数
	 * @param request
	 * @return
	 */
	@RequestMapping("/getPromotionIntegralList.do")
	@ResponseBody
	@BussAnnotation(moduleName="促销积分维护",option="获取列表")
	public LigerPageDataVo getPromotionIntegralList(int currentPage, int pageSize,String startTime,String endTime,String description, HttpServletRequest request) {
		// 条件参数
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("currentPage", currentPage);
		params.put("pageSize", pageSize);

		params.put("startTime", startTime);
		params.put("endTime", endTime);
		params.put("description", description);
		
		BasePageResultVo baseResultVo = gwPromotionIntegralServiceImpl.selectPageList(params);
		
		// liger ui 分页格式数据
		LigerPageDataVo data = new LigerPageDataVo();
		data.setRows(baseResultVo.getRows());
		data.setTotal(baseResultVo.getPageInfo().getTotalRecord());
		return data;
	}
	

}
