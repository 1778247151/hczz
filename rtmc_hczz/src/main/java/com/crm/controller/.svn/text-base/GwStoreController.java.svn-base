package com.crm.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.crm.common.BaseResultVo;
import com.crm.common.LigerPageDataVo;
import com.crm.common.ResponseCode;
import com.crm.common.SecurityUtil;
import com.crm.common.Status;
import com.crm.enums.gwTypeTreeEnum;
import com.crm.interceptor.BussAnnotation;
import com.crm.interceptor.exception.BaseException;
import com.crm.pojo.GwGoodsInStoreDetailModel;
import com.crm.pojo.GwLeaseMaintenanceModel;
import com.crm.pojo.GwTypeTreeModel;
import com.crm.service.GwGoodsInStoreDetailService;
import com.crm.service.GwLeaseMaintenanceService;
import com.crm.service.GwTypeTreeService;
import com.crm.util.DateUtil;

/**
 * 
 * GwStoreController:仓库控制层
 *
 * @author hemingjun
 * @date 2016年10月10日
 * @version jdk1.8
 *
 */
@Controller
@RequestMapping("/storeManage")
public class GwStoreController extends BaseException {

	// 日志
	private Logger logger = LoggerFactory.getLogger(GwStoreController.class);

	/**
	 * 类型树业务逻辑
	 */
	@Resource(name = "gwTypeTreeServiceManage")
	private GwTypeTreeService gwTypeTreeServiceImpl;
	/**
	 * 租借维护业务逻辑
	 */
	@Resource(name="gwLeaseMaintenanceServiceManage")
	private GwLeaseMaintenanceService gwLeaseMaintenanceServiceImpl;
	
	/**
	 * 物品入库明细逻辑层
	 */
	@Resource(name="gwGoodsInStoreDetailServiceManage")
	private GwGoodsInStoreDetailService gwGoodsInStoreDetailServiceImpl;
	/**
	 * addStore 添加仓库信息
	 * 
	 * @date 2016年10月10日
	 * @param
	 * @return
	 */
	@RequestMapping("/addStore.do")
	@ResponseBody
	@BussAnnotation(moduleName = "意见类型维护", option = "添加意见类型")
	public BaseResultVo addStore(GwTypeTreeModel gwTypeTreeModel, HttpServletRequest request) {
		GwTypeTreeModel t = gwTypeTreeServiceImpl.getTypeTreeByCode(gwTypeTreeModel.getCode());
		if (t != null) {
			return BaseResultVo.responseFail("编号已存在");
		}
		Map<String, Object> params = new HashMap<>();
		params.put("name", gwTypeTreeModel.getName());
		params.put("type", gwTypeTreeEnum.type_SIX.getStringValue());
		GwTypeTreeModel model = gwTypeTreeServiceImpl.getTypeTreeByName(params);
		if (model != null) {
			return BaseResultVo.responseFail("名称已存在");
		}
		Integer userid = SecurityUtil.getAdminUser(request).getUserId();
		gwTypeTreeModel.setCreateUserId(userid);
		gwTypeTreeModel.setCreateTime(DateUtil.getCurrentDatetime("-"));
		gwTypeTreeModel.setUpdateUserId(userid);
		gwTypeTreeModel.setUpdateTime(DateUtil.getCurrentDatetime("-"));

		gwTypeTreeModel.setType(gwTypeTreeEnum.type_SIX.getStringValue());

		gwTypeTreeServiceImpl.insert(gwTypeTreeModel);

		BaseResultVo baseResultVo = new BaseResultVo();
		Status status = new Status();
		status.setCode(ResponseCode.OPR_SUCCESS);// 提示代码
		status.setMsg("操作成功");// 提示信息
		status.setDebugMsg("");// bug信息
		status.setUrl("");// url

		baseResultVo.setStatus(status);
		return baseResultVo;
	}

	/**
	 * 
	 * delCustomerViewType:根据id，删除仓库信息
	 *
	 * @date 2016年10月10日
	 * @param id
	 *            仓库id
	 * @param request
	 * @return
	 */
	@RequestMapping("/delStore.do")
	@ResponseBody
	@BussAnnotation(moduleName = "仓库信息维护", option = "删除仓库信息-真删除")
	public BaseResultVo delStore(int id, HttpServletRequest request) {
		BaseResultVo baseResultVo = new BaseResultVo();
		Status status = new Status();
		status.setCode(ResponseCode.OPR_SUCCESS);// 提示代码
		status.setMsg("操作成功");// 提示信息
		status.setDebugMsg("");// bug信息
		status.setUrl("");// url

		if (id == 0) {
			status.setCode(ResponseCode.OPR_FAIL);
			status.setMsg("数据异常");// 提示信息
			baseResultVo.setStatus(status);
			return baseResultVo;
		}

		List<GwLeaseMaintenanceModel> list= gwLeaseMaintenanceServiceImpl.getAllList();
		GwTypeTreeModel gwTypeTreeModel = gwTypeTreeServiceImpl.selectById(id);
		for (GwLeaseMaintenanceModel model : list) {
			if(gwTypeTreeModel.getCode().equals(model.getStoreCode())){
				return BaseResultVo.responseFail("编号已生成租借维护信息，不能删除");
			}
		}
		List<GwGoodsInStoreDetailModel> goodsInStoreDetatilList= gwGoodsInStoreDetailServiceImpl.getAllList();
		for (GwGoodsInStoreDetailModel model : goodsInStoreDetatilList) {
			if(gwTypeTreeModel.getCode().equals(model.getStoreCode())){
				return BaseResultVo.responseFail("编号已生成物品入库单详细信息，不能删除");
			}
		}
		int num = gwTypeTreeServiceImpl.deleteById(id);
		if (num < 0) {
			status.setCode(ResponseCode.OPR_FAIL);
			status.setMsg("操作失败");// 提示信息
		}
		baseResultVo.setStatus(status);
		return baseResultVo;
	}

	/**
	 * 
	 * updateStore:更新仓库信息
	 *
	 * @date 2016年10月10日
	 * @param gwTypeTreeModel
	 *            意见类型信息对象
	 * @return
	 */
	@RequestMapping("/updateStore.do")
	@ResponseBody
	@BussAnnotation(moduleName = "仓库信息维护", option = "修改仓库信息")
	public BaseResultVo updateStore(GwTypeTreeModel gwTypeTreeModel, HttpServletRequest request) {
		GwTypeTreeModel modelOld = gwTypeTreeServiceImpl.selectById(gwTypeTreeModel.getId());
		if (!(modelOld.getName()).equals(gwTypeTreeModel.getName())) {
			Map<String, Object> params = new HashMap<>();
			params.put("name", gwTypeTreeModel.getName());
			params.put("type", gwTypeTreeEnum.type_SIX.getStringValue());
			GwTypeTreeModel model = gwTypeTreeServiceImpl.getTypeTreeByName(params);
			if (model != null) {
				return BaseResultVo.responseFail("名称已存在");
			}
		}
		BaseResultVo baseResultVo = new BaseResultVo();
		Status status = new Status();
		status.setCode(ResponseCode.OPR_SUCCESS);// 提示代码
		status.setMsg("操作成功");// 提示信息
		status.setDebugMsg("");// bug信息
		status.setUrl("");// url

		// 验证主键是否为空
		if (gwTypeTreeModel.getId() == 0) {
			status.setCode(ResponseCode.OPR_FAIL);
			status.setMsg("数据异常");
			baseResultVo.setStatus(status);
			return baseResultVo;
		}

		// 更新时间
		gwTypeTreeModel.setUpdateTime(DateUtil.getCurrentDatetime("-"));
		int userid = SecurityUtil.getAdminUser(request).getUserId();
		gwTypeTreeModel.setUpdateUserId(userid);

		// 更新意见类型信息
		gwTypeTreeServiceImpl.update(gwTypeTreeModel);
		baseResultVo.setStatus(status);
		return baseResultVo;
	}

	/**
	 * 
	 * getStoreList:获取仓库信息集合（分页）
	 *
	 * @date 2016年10月10日
	 * @param page
	 *            当前页码数
	 * @param pagesize
	 *            每页显示记录数
	 * @param request
	 * @return
	 */
	@RequestMapping("/getStoreList.do")
	@ResponseBody
	@BussAnnotation(moduleName = "仓库维护", option = "获取仓库信息集合")
	public LigerPageDataVo getStoreList(int currentPage, int pageSize, HttpServletRequest request) {
		// 条件参数
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("currentPage", currentPage);
		params.put("pageSize", pageSize);

		List<GwTypeTreeModel> list = gwTypeTreeServiceImpl.getTypeTreeByType(gwTypeTreeEnum.type_SIX.getStringValue());

		// liger ui 分页格式数据
		LigerPageDataVo data = new LigerPageDataVo();
		data.setRows(list);
		data.setTotal(list.size());
		return data;
	}
}
