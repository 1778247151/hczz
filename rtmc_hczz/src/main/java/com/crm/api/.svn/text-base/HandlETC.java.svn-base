package com.crm.api;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.crm.bean.ShopFormatsInfo;
import com.crm.common.BaseResultVo;
import com.crm.enums.IntegralTypeEnum;
import com.crm.enums.IntergralTypeEnum;
import com.crm.enums.PaymenttenderIntegralStatusEnum;
import com.crm.pojo.GwMemberIntegralDetailModel;
import com.crm.pojo.GwMemberIntegralRecordModel;
import com.crm.pojo.GwMembersModel;
import com.crm.pojo.GwPaymentTenderModel;
import com.crm.pojo.GwSalesModel;
import com.crm.pojo.GwSalesPaymenttenderModel;
import com.crm.service.GwMemberIntegralDetailService;
import com.crm.service.GwMembersService;
import com.crm.service.GwPaymentTenderService;
import com.crm.service.GwPromotionIntegralService;
import com.crm.service.GwSalesPaymenttenderService;
import com.crm.service.GwSalesService;
import com.crm.service.GwShopsLeaseService;
import com.crm.util.DateUtil;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

/**
 * @project: GDWS
 * @author:文豪 E-mail:wenhaoboy@gmail.com
 * @version QQ:403665586 2016-04-16 调用方法处理
 */
@Service("webapiServiceManage")
public class HandlETC {
	// 日志
	private Logger logger = LoggerFactory.getLogger(HandlETC.class);

	/**
	 * 会员业务逻辑
	 */
	@Resource(name = "gwMembersServiceManage")
	private GwMembersService gwMembersServiceImpl;

	/**
	 * 支付方式是否积分业务逻辑
	 */
	@Resource(name = "gwPaymentTenderServiceManage")
	private GwPaymentTenderService gwPaymentTenderServiceImpl;

	/**
	 * 促销积分积分规则业务逻辑层的实现
	 */
	@Resource(name = "gwPromotionIntegralServiceManage")
	private GwPromotionIntegralService promotionIntegralServiceImpl;
	
	/**
	 * 销售数据获取积分业务逻辑层实现
	 */
	@Resource(name = "gwSalesServiceManage")
	private GwSalesService salesServiceImpl;
	
	/**
	 * 销售数据支付方式业务逻辑层
	 */
	@Resource(name = "salesPaymenttenderServiceManage")
	private GwSalesPaymenttenderService salesPaymenttenderServiceImpl;
	/**
	 * 店铺业务逻辑
	 */
	@Resource(name = "gwShopsLeaseServiceManage")
	private GwShopsLeaseService gwShopsLeaseServiceImpl;
	
	/**
	 * 会员积分明细业务逻辑层实心
	 */
	@Resource(name = "gwMemberIntegralDetailServiceManage")
	private GwMemberIntegralDetailService memberIntegralDetailServiceImpl;
	/**
	 * 
	 * verification:接口数据的校验
	 *
	 * @author yumaochun
	 * @date 2016年4月27日
	 * @param DYLX
	 * @param DATA
	 *            接口数据（json）
	 * @param request
	 * @return
	 */
	public BaseResultVo verification(String DATA, HttpServletRequest request) {
		counter=0;
		
		// 通过销售数据获取积分
			String[] status;
			JSONObject json = JSONObject.fromObject(DATA);
			//创建json数组，用于存放支付方式信息
			JSONArray jsonArray=new JSONArray();
			//计算包含的支付方式编号key值code的个数
			counter=stringNumbers(json.toString());
			//创建新的字符集合，用于存放转换的json数组
			List<String> os=new ArrayList<>();
			if(counter>1){
				jsonArray = (JSONArray) json.get("gwPaymenttenderCode");// 支付方式数组
				// 支付方式数组转集合对象
				 os = (List<String>) JSONArray.toCollection(jsonArray);
			}else{
				String c= json.getString("gwPaymenttenderCode");
				c=c.substring(1, c.length()-1);//单个支付方式转集合
				String[] strs = {c};
				os = Arrays.asList(strs);
			}
			String gwTxserial=json.getString("gwTxserial");//流水单号
			int gwSalesnumber=Integer.parseInt(json.getString("gwSalesnumber"));//销售总数
			String saleDate = json.getString("gwTxdate");// 销售日期
			String gwTxtime=json.getString("gwTxtime");//销售时间
			String gwTillid=json.getString("gwTillid");//收银机编号
			String membersCode = json.getString("gwMemberCode");// 会员VIP号或会员卡号
			String shopCode = json.getString("gwStoreCode");// 店铺编号
			int theIntegralTotal = 0;// 总销售积分
			// 根据会员VIP编号，获取会员信息
			GwMembersModel membersInfo = gwMembersServiceImpl.getMembersByCode(membersCode);
			if (membersInfo == null) {
				logger.info("该会员不存在");
				return BaseResultVo.responseFail("该会员不存在");
			}
			Map<String, Object> paramMap = new HashMap<>();
			paramMap.put("shopCode", shopCode);
			// 获取店铺对应的业态信息
			ShopFormatsInfo shopFormatsInfo = gwShopsLeaseServiceImpl.getShopformatsInfoByShopCode(paramMap);
			if (shopFormatsInfo == null) {
				logger.info("根据店铺编号【" + shopCode + "】未找到对应的业态信息！");
				return BaseResultVo.responseFail("店铺不存在");
			}
			// 销售对象存入值
			GwSalesModel salesModel = new GwSalesModel();
			salesModel.setGwTxdate(saleDate);
			salesModel.setShopCode(shopCode);
			// 支付方式信息是否存在标记
			Boolean flag_paymentTender = false;
			// 支付方式能否积分标记
			Boolean flag_paymentTenderCode = false;
			List<GwSalesPaymenttenderModel> salesPaymenttenderList=new ArrayList<>();//支付方式集合
			GwMembersModel memberIntegralInfo = new GwMembersModel();
			memberIntegralInfo.setVipCode(membersInfo.getVipCode());// 会员号
			memberIntegralInfo.setCardCode(membersInfo.getCardCode());// 会员卡号
			memberIntegralInfo.setGrade(membersInfo.getGrade());// 会员等级
			memberIntegralInfo.setGradeName(membersInfo.getDescription());// 会员等级名称
			memberIntegralInfo.setUserName(membersInfo.getUserName());// 会员姓名

			//插入会员积分记录
			GwMemberIntegralRecordModel integralModel = new GwMemberIntegralRecordModel();
			integralModel.setCode(membersInfo.getVipCode());
			integralModel.setIntegralTime(DateUtil.getCurrentDatetime("-"));
			integralModel.setIntegraltype(IntegralTypeEnum.SALES.getValue());
			integralModel.setCreatetime(DateUtil.getCurrentDatetime("-"));
			
			List<String> strList = new ArrayList<>();//支付方式编号集合

			for (Object o : os) {
				int theIntegral=0;//本次积分
				JSONObject o2 = JSONObject.fromObject(o);//会员积分对象
				String paymentTenderCode = o2.getString("code");// 支付方式编号
				strList.add(paymentTenderCode);//支付方式编号集合添加支付编号
				String payMoney = o2.getString("payMoney");// 此支付方式的支付金额
				// 销售对象存入此支付方式的金额
				salesModel.setGwSalesamount(new BigDecimal(payMoney));
				//本次销售数据支付信息
				GwSalesPaymenttenderModel salesPaymenttender=new GwSalesPaymenttenderModel();
				salesPaymenttender.setGwTxserial(gwTxserial);
				salesPaymenttender.setGwCode(paymentTenderCode);
				salesPaymenttender.setGwPaymoney(new BigDecimal(payMoney));
				salesPaymenttender.setGwState(PaymenttenderIntegralStatusEnum.YES.getValue());
				salesPaymenttender.setCreateTime(DateUtil.getCurrentDatetime("-"));
				// 根据支付方式编号查询是否存在该支付方式的对象
				GwPaymentTenderModel paymentTender = gwPaymentTenderServiceImpl.getPaymentTenderByCode(paymentTenderCode);
				if (paymentTender != null) {
					flag_paymentTender = true;
					//支付方式是否积分：1-积分，0-不积分
					if (paymentTender.getWhetherIntegral() == PaymenttenderIntegralStatusEnum.YES.getValue()) {
						flag_paymentTenderCode = true;
						//本次积分
						theIntegral = promotionIntegralServiceImpl.addMemberIntegralInfo(salesModel, membersInfo,shopFormatsInfo);	
						integralModel.setIntegralnum(theIntegral);//积分记录对象获取增减的积分
						salesPaymenttender.setIntegralNumber(theIntegral);//本次销售数据插入本次积分
					}else{
						//如果支付方式不能积分，本次积分设置为0
						theIntegral=0;
						salesPaymenttender.setIntegralNumber(theIntegral);//本次销售数据插入本次积分
						salesPaymenttender.setGwState(PaymenttenderIntegralStatusEnum.NO.getValue());
					}
					salesPaymenttenderList.add(salesPaymenttender);
					
				}
				theIntegralTotal+=theIntegral;
			}
			//会员当前积分+销售积分
			int memberIntegral =membersInfo.getCredit()+theIntegralTotal;
			//更新会员积分
			memberIntegralInfo.setCredit(memberIntegral);
			gwMembersServiceImpl.updateByVipCode(memberIntegralInfo);//通过vip号更新会员信息
			//插入积分明细表
			if(theIntegralTotal!=0){
				GwMemberIntegralDetailModel integralDetai=new GwMemberIntegralDetailModel();
				integralDetai.setCardCode(membersInfo.getCardCode());
				integralDetai.setIntergralTime(DateUtil.getCurrentDatetime("-"));
				integralDetai.setMemberCode(membersInfo.getVipCode());
				integralDetai.setIntergralNum(theIntegralTotal);
				integralDetai.setIntergralType(IntergralTypeEnum.SALESINTERGRAL.getValue());
				integralDetai.setNote("销售数据积分(增加)");
				int detatilNumber= memberIntegralDetailServiceImpl.insert(integralDetai);
				
				if(detatilNumber<=0){
					logger.info("积分明细记录插入失败！");
				}
			}
			if(salesPaymenttenderList.size()>0){
				//本次销售数据支付信息插入表中
				int i= salesPaymenttenderServiceImpl.batchInsert(salesPaymenttenderList);
				if(i>0){
					logger.info("销售数据支付方式插入成功");
				}else{
					logger.info("销售数据支付方式插入失败！");
				}
			}
			if (flag_paymentTender == false) {
				logger.info("该支付方式积分规则不存在");
				return BaseResultVo.responseFail("该支付方式积分规则不存在");
			}
			if (flag_paymentTenderCode == false) {
				logger.info("该支付方式不能积分");
				return BaseResultVo.responseFail("该支付方式不能积分");
			}
			//销售数据积分对象插入数据
			GwSalesModel sales=new GwSalesModel();
			sales.setGwTxserial(gwTxserial);
			sales.setGwSalesnumber(gwSalesnumber);
			sales.setGwTxdate(saleDate);
			sales.setGwTxtime(gwTxtime);
			sales.setGwTillid(gwTillid);
			sales.setShopCode(shopCode);
			sales.setGwPaymenttendercode(String.join(";", strList));
			sales.setGwMembercode(membersCode);
			sales.setIntegralNumber(theIntegralTotal);
			sales.setCreateTime(DateUtil.getCurrentDatetime("-"));
			 int j= salesServiceImpl.insert(sales);
			 if(j>0){
				 logger.info("销售积分数据插入成功！");
			 }else{
				 logger.info("销售积分数据插入失败！");
			 }		
		counter=0;
		return BaseResultVo.responseSuccess("计算销售积分成功");
	}
	
	private static int counter = 0;
	/**
	 * 
	 * stringNumbers:
	 * 计算字符串中存在code的数量
	 * @author hemingjun
	 * @date 2016年9月5日
	 * @param str
	 * @return
	 */
	public static int stringNumbers(String str)  
    {  
        if (str.indexOf("code")==-1)  
        {  
            return 0;  
        }  
        else if(str.indexOf("code") != -1)  
        {  
            counter++;  
            stringNumbers(str.substring(str.indexOf("code")+4));  
            return counter;  
        }  
        return 0;  
    }  
}
