<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
 	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd  
                        http://www.springframework.org/schema/tx 
	                    http://www.springframework.org/schema/tx/spring-tx-4.0.xsd 
	                    http://www.springframework.org/schema/aop 
	                    http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
	<!-- 自动扫描 -->
	<context:component-scan base-package="com.crm" />
	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer"
		class="com.crm.common.PropertyPlaceholder">
		   <!-- 配置多个文件 -->
		   <property name="locations">  
		        <list>
		             <value>classpath:jdbc.properties</value>  
		             <value>classpath:system-config.properties</value>
		        </list>
		   </property>
		   <!-- 配置单一文件 -->
		   <!-- 
		  <property name="location" value="classpath:jdbc.properties" />
		   -->
	</bean>
    <!--<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"  -->
	<bean id="dataSource" class="com.crm.util.BasicDataSourceUtil"
		destroy-method="close">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${initialSize}"></property>
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${maxActive}"></property>
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${maxIdle}"></property>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${minIdle}"></property>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${maxWait}"></property>
		<!-- 验证连接 -->
		<property name="validationQuery" value="${validationQuery}" />
		<!-- 间隔多少毫秒启动任务执行检测空闲连接 -->
		<property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
		<!-- 每次检测空闲连接时检测多少条连接 -->
		<property name="numTestsPerEvictionRun" value="${numTestsPerEvictionRun}" />
		<!-- #空闲时间超过多少毫秒则可以释放 -->
		<property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />
	</bean>

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:com/crm/mapper/*.xml"></property>
		<!-- 
		 <property name="typeAliasesPackage" value="com.isea533.ssm.model"/>
		  <property name="plugins">
		    <array>
		      <bean class="com.github.pagehelper.PageHelper">
		        <property name="properties">
		          <value>
		            dialect=mysql
		            reasonable=true
		          </value>
		        </property>
		      </bean>
		    </array>
		  </property>
		   -->
	</bean>

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate"> 
      <constructor-arg index="0" ref="sqlSessionFactory" /> 
    </bean>
    <!-- 基础dao层 -->
    <bean id="baseDao" class="com.crm.core.BaseDao"> 
         <!--注入SqlSessionTemplate实例 --> 
         <property name="sqlSessionTemplate" ref="sqlSession" /> 
         <!--也可直接注入SqlSessionFactory实例，二者都指定时，SqlSessionFactory失效 --> 
         <!-- <property name="sqlSessionFactory" ref="sqlSessionFactory" />  -->
    </bean>
	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<!--  
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.crm.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>
    -->
	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
    	<tx:attributes>
    	
    	   <tx:method name="insert*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
    	   <tx:method name="add*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
      	   <tx:method name="delete*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />  		
		   <tx:method name="update*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
		   <tx:method name="find*" read-only="true"/>
		   <tx:method name="get*" read-only="true"/>
		   <tx:method name="select*" read-only="true"/>
    	</tx:attributes>
    </tx:advice>
    <!--把事务控制在Service层-->
    <aop:config>    
	   <aop:pointcut id="pc" expression="execution( * com.crm.service.impl.*.*(..))" /> 
	   <aop:advisor pointcut-ref="pc" advice-ref="txAdvice" />
    </aop:config>
    
    </beans>